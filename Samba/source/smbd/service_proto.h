#ifndef __SMBD_SERVICE_PROTO_H__
#define __SMBD_SERVICE_PROTO_H__

#undef _PRINTF_ATTRIBUTE
#define _PRINTF_ATTRIBUTE(a1, a2) PRINTF_ATTRIBUTE(a1, a2)
/* This file was automatically generated by mkproto.pl. DO NOT EDIT */

#ifndef _PUBLIC_
#define _PUBLIC_
#endif


/* The following definitions come from smbd/service.c  */

NTSTATUS register_server_service(const char *name,
				 NTSTATUS (*service_init)(struct event_context *, const struct model_ops *));
NTSTATUS server_service_startup(struct event_context *event_ctx, 
				const char *model, const char **server_services);

/* The following definitions come from smbd/service_stream.c  */

void stream_terminate_connection(struct stream_connection *srv_conn, const char *reason);
void stream_io_handler_callback(void *private, uint16_t flags) ;
NTSTATUS stream_new_connection_merge(struct event_context *ev,
				     const struct model_ops *model_ops,
				     struct socket_context *sock,
				     const struct stream_server_ops *stream_ops,
				     struct messaging_context *msg_ctx,
				     void *private_data,
				     struct stream_connection **_srv_conn);
NTSTATUS stream_setup_socket(struct event_context *event_context,
			     const struct model_ops *model_ops,
			     const struct stream_server_ops *stream_ops,
			     const char *family,
			     const char *sock_addr,
			     uint16_t *port,
			     void *private);
void stream_connection_set_title(struct stream_connection *conn, const char *title);

/* The following definitions come from smbd/service_task.c  */

void task_server_terminate(struct task_server *task, const char *reason);
NTSTATUS task_server_startup(struct event_context *event_ctx, 
			     const struct model_ops *model_ops, 
			     void (*task_init)(struct task_server *));
void task_server_set_title(struct task_server *task, const char *title);
#undef _PRINTF_ATTRIBUTE
#define _PRINTF_ATTRIBUTE(a1, a2)

#endif /* __SMBD_SERVICE_PROTO_H__ */

