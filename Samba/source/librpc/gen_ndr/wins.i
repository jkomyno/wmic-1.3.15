/* This file is autogenerated by pidl. DO NOT EDIT */
%module wins

%{
#include "includes.h"
#include "auth/credentials/credentials.h"
#include "librpc/gen_ndr/ndr_wins_c.h"
#include "librpc/gen_ndr/wins.h"
%}
%import "samba.i"

%inline {
void ntstatus_exception(NTSTATUS status)
{
	/* FIXME */
}
}



%inline {
struct WinsPipe { struct dcerpc_pipe *pipe; };
}

%extend WinsPipe {
	WinsPipe (const char *binding, struct cli_credentials *cred = NULL, TALLOC_CTX *mem_ctx = NULL, struct event_context *event = NULL)
	{
		struct WinsPipe *ret = talloc(mem_ctx, struct WinsPipe);
		NTSTATUS status;
		
		status = dcerpc_pipe_connect(mem_ctx, &ret->pipe, binding, &dcerpc_table_WinsPipe, cred, event);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return NULL;
		}
		
		return ret;
	}
	
	~WinsPipe() {
		talloc_free(self);
	}
	
	/* WinsRecordAction */
	void WinsRecordAction(TALLOC_CTX *mem_ctx = NULL)
	{
		struct WinsRecordAction r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_WinsRecordAction(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* WinsStatus */
	void WinsStatus(TALLOC_CTX *mem_ctx = NULL)
	{
		struct WinsStatus r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_WinsStatus(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* WinsTrigger */
	void WinsTrigger(TALLOC_CTX *mem_ctx = NULL)
	{
		struct WinsTrigger r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_WinsTrigger(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* WinsDoStaticInit */
	void WinsDoStaticInit(TALLOC_CTX *mem_ctx = NULL)
	{
		struct WinsDoStaticInit r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_WinsDoStaticInit(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* WinsDoScavenging */
	void WinsDoScavenging(TALLOC_CTX *mem_ctx = NULL)
	{
		struct WinsDoScavenging r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_WinsDoScavenging(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* WinsGetDbRecs */
	void WinsGetDbRecs(TALLOC_CTX *mem_ctx = NULL)
	{
		struct WinsGetDbRecs r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_WinsGetDbRecs(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* WinsTerm */
	void WinsTerm(TALLOC_CTX *mem_ctx = NULL)
	{
		struct WinsTerm r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_WinsTerm(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* WinsBackup */
	void WinsBackup(TALLOC_CTX *mem_ctx = NULL)
	{
		struct WinsBackup r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_WinsBackup(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* WinsDelDbRecs */
	void WinsDelDbRecs(TALLOC_CTX *mem_ctx = NULL)
	{
		struct WinsDelDbRecs r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_WinsDelDbRecs(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* WinsPullRange */
	void WinsPullRange(TALLOC_CTX *mem_ctx = NULL)
	{
		struct WinsPullRange r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_WinsPullRange(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* WinsSetPriorityClass */
	void WinsSetPriorityClass(TALLOC_CTX *mem_ctx = NULL)
	{
		struct WinsSetPriorityClass r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_WinsSetPriorityClass(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* WinsResetCounters */
	void WinsResetCounters(TALLOC_CTX *mem_ctx = NULL)
	{
		struct WinsResetCounters r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_WinsResetCounters(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* WinsWorkerThreadUpdate */
	void WinsWorkerThreadUpdate(TALLOC_CTX *mem_ctx = NULL)
	{
		struct WinsWorkerThreadUpdate r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_WinsWorkerThreadUpdate(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* WinsGetNameAndAdd */
	void WinsGetNameAndAdd(TALLOC_CTX *mem_ctx = NULL)
	{
		struct WinsGetNameAndAdd r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_WinsGetNameAndAdd(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* WinsGetBrowserNames_Old */
	void WinsGetBrowserNames_Old(TALLOC_CTX *mem_ctx = NULL)
	{
		struct WinsGetBrowserNames_Old r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_WinsGetBrowserNames_Old(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* WinsDeleteWins */
	void WinsDeleteWins(TALLOC_CTX *mem_ctx = NULL)
	{
		struct WinsDeleteWins r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_WinsDeleteWins(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* WinsSetFlags */
	void WinsSetFlags(TALLOC_CTX *mem_ctx = NULL)
	{
		struct WinsSetFlags r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_WinsSetFlags(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* WinsGetDbRecsByName */
	void WinsGetDbRecsByName(TALLOC_CTX *mem_ctx = NULL)
	{
		struct WinsGetDbRecsByName r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_WinsGetDbRecsByName(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* WinsStatusWHdl */
	void WinsStatusWHdl(TALLOC_CTX *mem_ctx = NULL)
	{
		struct WinsStatusWHdl r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_WinsStatusWHdl(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* WinsDoScanvenging2 */
	void WinsDoScanvenging2(TALLOC_CTX *mem_ctx = NULL)
	{
		struct WinsDoScanvenging2 r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_WinsDoScanvenging2(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
};


