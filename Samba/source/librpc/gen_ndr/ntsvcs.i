/* This file is autogenerated by pidl. DO NOT EDIT */
%module ntsvcs

%{
#include "includes.h"
#include "auth/credentials/credentials.h"
#include "librpc/gen_ndr/ndr_ntsvcs_c.h"
#include "librpc/gen_ndr/ntsvcs.h"
%}
%import "samba.i"

%inline {
void ntstatus_exception(NTSTATUS status)
{
	/* FIXME */
}
}



%inline {
struct ntsvcs { struct dcerpc_pipe *pipe; };
}

%extend ntsvcs {
	ntsvcs (const char *binding, struct cli_credentials *cred = NULL, TALLOC_CTX *mem_ctx = NULL, struct event_context *event = NULL)
	{
		struct ntsvcs *ret = talloc(mem_ctx, struct ntsvcs);
		NTSTATUS status;
		
		status = dcerpc_pipe_connect(mem_ctx, &ret->pipe, binding, &dcerpc_table_ntsvcs, cred, event);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return NULL;
		}
		
		return ret;
	}
	
	~ntsvcs() {
		talloc_free(self);
	}
	
	/* PNP_Disconnect */
	void PNP_Disconnect(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_Disconnect r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_Disconnect(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_Connect */
	void PNP_Connect(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_Connect r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_Connect(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_GetVersion */
	void PNP_GetVersion(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_GetVersion r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_GetVersion(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_GetGlobalState */
	void PNP_GetGlobalState(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_GetGlobalState r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_GetGlobalState(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_InitDetection */
	void PNP_InitDetection(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_InitDetection r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_InitDetection(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_ReportLogOn */
	void PNP_ReportLogOn(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_ReportLogOn r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_ReportLogOn(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_ValidateDeviceInstance */
	void PNP_ValidateDeviceInstance(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_ValidateDeviceInstance r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_ValidateDeviceInstance(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_GetRootDeviceInstance */
	void PNP_GetRootDeviceInstance(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_GetRootDeviceInstance r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_GetRootDeviceInstance(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_GetRelatedDeviceInstance */
	void PNP_GetRelatedDeviceInstance(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_GetRelatedDeviceInstance r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_GetRelatedDeviceInstance(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_EnumerateSubKeys */
	void PNP_EnumerateSubKeys(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_EnumerateSubKeys r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_EnumerateSubKeys(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_GetDeviceList */
	void PNP_GetDeviceList(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_GetDeviceList r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_GetDeviceList(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_GetDeviceListSize */
	void PNP_GetDeviceListSize(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_GetDeviceListSize r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_GetDeviceListSize(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_GetDepth */
	void PNP_GetDepth(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_GetDepth r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_GetDepth(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_GetDeviceRegProp */
	void PNP_GetDeviceRegProp(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_GetDeviceRegProp r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_GetDeviceRegProp(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_SetDeviceRegProp */
	void PNP_SetDeviceRegProp(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_SetDeviceRegProp r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_SetDeviceRegProp(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_GetClassInstance */
	void PNP_GetClassInstance(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_GetClassInstance r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_GetClassInstance(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_CreateKey */
	void PNP_CreateKey(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_CreateKey r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_CreateKey(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_DeleteRegistryKey */
	void PNP_DeleteRegistryKey(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_DeleteRegistryKey r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_DeleteRegistryKey(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_GetClassCount */
	void PNP_GetClassCount(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_GetClassCount r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_GetClassCount(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_GetClassName */
	void PNP_GetClassName(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_GetClassName r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_GetClassName(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_DeleteClassKey */
	void PNP_DeleteClassKey(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_DeleteClassKey r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_DeleteClassKey(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_GetInterfaceDeviceAlias */
	void PNP_GetInterfaceDeviceAlias(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_GetInterfaceDeviceAlias r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_GetInterfaceDeviceAlias(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_GetInterfaceDeviceList */
	void PNP_GetInterfaceDeviceList(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_GetInterfaceDeviceList r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_GetInterfaceDeviceList(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_GetInterfaceDeviceListSize */
	void PNP_GetInterfaceDeviceListSize(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_GetInterfaceDeviceListSize r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_GetInterfaceDeviceListSize(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_RegisterDeviceClassAssociation */
	void PNP_RegisterDeviceClassAssociation(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_RegisterDeviceClassAssociation r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_RegisterDeviceClassAssociation(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_UnregisterDeviceClassAssociation */
	void PNP_UnregisterDeviceClassAssociation(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_UnregisterDeviceClassAssociation r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_UnregisterDeviceClassAssociation(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_GetClassRegProp */
	void PNP_GetClassRegProp(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_GetClassRegProp r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_GetClassRegProp(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_SetClassRegProp */
	void PNP_SetClassRegProp(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_SetClassRegProp r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_SetClassRegProp(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_CreateDevInst */
	void PNP_CreateDevInst(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_CreateDevInst r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_CreateDevInst(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_DeviceInstanceAction */
	void PNP_DeviceInstanceAction(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_DeviceInstanceAction r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_DeviceInstanceAction(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_GetDeviceStatus */
	void PNP_GetDeviceStatus(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_GetDeviceStatus r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_GetDeviceStatus(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_SetDeviceProblem */
	void PNP_SetDeviceProblem(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_SetDeviceProblem r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_SetDeviceProblem(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_DisableDevInst */
	void PNP_DisableDevInst(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_DisableDevInst r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_DisableDevInst(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_UninstallDevInst */
	void PNP_UninstallDevInst(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_UninstallDevInst r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_UninstallDevInst(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_AddID */
	void PNP_AddID(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_AddID r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_AddID(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_RegisterDriver */
	void PNP_RegisterDriver(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_RegisterDriver r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_RegisterDriver(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_QueryRemove */
	void PNP_QueryRemove(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_QueryRemove r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_QueryRemove(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_RequestDeviceEject */
	void PNP_RequestDeviceEject(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_RequestDeviceEject r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_RequestDeviceEject(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_IsDockStationPresent */
	void PNP_IsDockStationPresent(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_IsDockStationPresent r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_IsDockStationPresent(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_RequestEjectPC */
	void PNP_RequestEjectPC(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_RequestEjectPC r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_RequestEjectPC(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_HwProfFlags */
	void PNP_HwProfFlags(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_HwProfFlags r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_HwProfFlags(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_GetHwProfInfo */
	void PNP_GetHwProfInfo(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_GetHwProfInfo r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_GetHwProfInfo(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_AddEmptyLogConf */
	void PNP_AddEmptyLogConf(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_AddEmptyLogConf r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_AddEmptyLogConf(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_FreeLogConf */
	void PNP_FreeLogConf(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_FreeLogConf r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_FreeLogConf(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_GetFirstLogConf */
	void PNP_GetFirstLogConf(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_GetFirstLogConf r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_GetFirstLogConf(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_GetNextLogConf */
	void PNP_GetNextLogConf(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_GetNextLogConf r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_GetNextLogConf(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_GetLogConfPriority */
	void PNP_GetLogConfPriority(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_GetLogConfPriority r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_GetLogConfPriority(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_AddResDes */
	void PNP_AddResDes(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_AddResDes r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_AddResDes(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_FreeResDes */
	void PNP_FreeResDes(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_FreeResDes r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_FreeResDes(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_GetNextResDes */
	void PNP_GetNextResDes(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_GetNextResDes r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_GetNextResDes(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_GetResDesData */
	void PNP_GetResDesData(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_GetResDesData r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_GetResDesData(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_GetResDesDataSize */
	void PNP_GetResDesDataSize(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_GetResDesDataSize r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_GetResDesDataSize(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_ModifyResDes */
	void PNP_ModifyResDes(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_ModifyResDes r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_ModifyResDes(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_DetectResourceLimit */
	void PNP_DetectResourceLimit(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_DetectResourceLimit r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_DetectResourceLimit(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_QueryResConfList */
	void PNP_QueryResConfList(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_QueryResConfList r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_QueryResConfList(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_SetHwProf */
	void PNP_SetHwProf(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_SetHwProf r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_SetHwProf(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_QueryArbitratorFreeData */
	void PNP_QueryArbitratorFreeData(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_QueryArbitratorFreeData r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_QueryArbitratorFreeData(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_QueryArbitratorFreeSize */
	void PNP_QueryArbitratorFreeSize(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_QueryArbitratorFreeSize r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_QueryArbitratorFreeSize(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_RunDetection */
	void PNP_RunDetection(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_RunDetection r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_RunDetection(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_RegisterNotification */
	void PNP_RegisterNotification(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_RegisterNotification r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_RegisterNotification(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_UnregisterNotification */
	void PNP_UnregisterNotification(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_UnregisterNotification r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_UnregisterNotification(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_GetCustomDevProp */
	void PNP_GetCustomDevProp(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_GetCustomDevProp r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_GetCustomDevProp(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_GetVersionInternal */
	void PNP_GetVersionInternal(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_GetVersionInternal r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_GetVersionInternal(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_GetBlockedDriverInfo */
	void PNP_GetBlockedDriverInfo(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_GetBlockedDriverInfo r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_GetBlockedDriverInfo(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* PNP_GetServerSideDeviceInstallFlags */
	void PNP_GetServerSideDeviceInstallFlags(TALLOC_CTX *mem_ctx = NULL)
	{
		struct PNP_GetServerSideDeviceInstallFlags r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_PNP_GetServerSideDeviceInstallFlags(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
};


