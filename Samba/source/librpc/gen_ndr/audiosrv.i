/* This file is autogenerated by pidl. DO NOT EDIT */
%module audiosrv

%{
#include "includes.h"
#include "auth/credentials/credentials.h"
#include "librpc/gen_ndr/ndr_audiosrv_c.h"
#include "librpc/gen_ndr/audiosrv.h"
%}
%import "samba.i"

%inline {
void ntstatus_exception(NTSTATUS status)
{
	/* FIXME */
}
}



%inline {
struct audiosrv { struct dcerpc_pipe *pipe; };
}

%extend audiosrv {
	audiosrv (const char *binding, struct cli_credentials *cred = NULL, TALLOC_CTX *mem_ctx = NULL, struct event_context *event = NULL)
	{
		struct audiosrv *ret = talloc(mem_ctx, struct audiosrv);
		NTSTATUS status;
		
		status = dcerpc_pipe_connect(mem_ctx, &ret->pipe, binding, &dcerpc_table_audiosrv, cred, event);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return NULL;
		}
		
		return ret;
	}
	
	~audiosrv() {
		talloc_free(self);
	}
	
	/* audiosrv_CreatezoneFactoriesList */
	void CreatezoneFactoriesList(TALLOC_CTX *mem_ctx = NULL)
	{
		struct audiosrv_CreatezoneFactoriesList r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_audiosrv_CreatezoneFactoriesList(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* audiosrv_CreateGfxFactoriesList */
	void CreateGfxFactoriesList(TALLOC_CTX *mem_ctx = NULL)
	{
		struct audiosrv_CreateGfxFactoriesList r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_audiosrv_CreateGfxFactoriesList(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* audiosrv_CreateGfxList */
	void CreateGfxList(TALLOC_CTX *mem_ctx = NULL)
	{
		struct audiosrv_CreateGfxList r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_audiosrv_CreateGfxList(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* audiosrv_RemoveGfx */
	void RemoveGfx(TALLOC_CTX *mem_ctx = NULL)
	{
		struct audiosrv_RemoveGfx r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_audiosrv_RemoveGfx(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* audiosrv_AddGfx */
	void AddGfx(TALLOC_CTX *mem_ctx = NULL)
	{
		struct audiosrv_AddGfx r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_audiosrv_AddGfx(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* audiosrv_ModifyGfx */
	void ModifyGfx(TALLOC_CTX *mem_ctx = NULL)
	{
		struct audiosrv_ModifyGfx r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_audiosrv_ModifyGfx(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* audiosrv_OpenGfx */
	void OpenGfx(TALLOC_CTX *mem_ctx = NULL)
	{
		struct audiosrv_OpenGfx r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_audiosrv_OpenGfx(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* audiosrv_Logon */
	void Logon(TALLOC_CTX *mem_ctx = NULL)
	{
		struct audiosrv_Logon r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_audiosrv_Logon(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* audiosrv_Logoff */
	void Logoff(TALLOC_CTX *mem_ctx = NULL)
	{
		struct audiosrv_Logoff r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_audiosrv_Logoff(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* audiosrv_RegisterSessionNotificationEvent */
	void RegisterSessionNotificationEvent(TALLOC_CTX *mem_ctx = NULL)
	{
		struct audiosrv_RegisterSessionNotificationEvent r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_audiosrv_RegisterSessionNotificationEvent(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* audiosrv_UnregisterSessionNotificationEvent */
	void UnregisterSessionNotificationEvent(TALLOC_CTX *mem_ctx = NULL)
	{
		struct audiosrv_UnregisterSessionNotificationEvent r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_audiosrv_UnregisterSessionNotificationEvent(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* audiosrv_SessionConnectState */
	void SessionConnectState(TALLOC_CTX *mem_ctx = NULL)
	{
		struct audiosrv_SessionConnectState r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_audiosrv_SessionConnectState(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* audiosrv_DriverOpenDrvRegKey */
	void DriverOpenDrvRegKey(TALLOC_CTX *mem_ctx = NULL)
	{
		struct audiosrv_DriverOpenDrvRegKey r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_audiosrv_DriverOpenDrvRegKey(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* audiosrv_AdvisePreferredDeviceChange */
	void AdvisePreferredDeviceChange(TALLOC_CTX *mem_ctx = NULL)
	{
		struct audiosrv_AdvisePreferredDeviceChange r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_audiosrv_AdvisePreferredDeviceChange(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* audiosrv_GetPnpInfo */
	void GetPnpInfo(TALLOC_CTX *mem_ctx = NULL)
	{
		struct audiosrv_GetPnpInfo r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_audiosrv_GetPnpInfo(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
};


