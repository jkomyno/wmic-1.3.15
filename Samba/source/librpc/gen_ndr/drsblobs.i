/* This file is autogenerated by pidl. DO NOT EDIT */
%module drsblobs

%{
#include "includes.h"
#include "auth/credentials/credentials.h"
#include "librpc/gen_ndr/ndr_drsblobs_c.h"
#include "librpc/gen_ndr/drsblobs.h"
%}
%import "samba.i"

%inline {
void ntstatus_exception(NTSTATUS status)
{
	/* FIXME */
}
}

%types(replPropertyMetaDataBlob);
%types(replUpToDateVectorBlob);
%types(repsFromTo1OtherInfo);
%types(repsFromTo1);
%types(repsFromToBlob);
%types(ldapControlDirSyncCookie);
%types(DsCompressedChunk);
%types(DsCompressedBlob);


%inline {
struct drsblobs { struct dcerpc_pipe *pipe; };
}

%extend drsblobs {
	drsblobs (const char *binding, struct cli_credentials *cred = NULL, TALLOC_CTX *mem_ctx = NULL, struct event_context *event = NULL)
	{
		struct drsblobs *ret = talloc(mem_ctx, struct drsblobs);
		NTSTATUS status;
		
		status = dcerpc_pipe_connect(mem_ctx, &ret->pipe, binding, &dcerpc_table_drsblobs, cred, event);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return NULL;
		}
		
		return ret;
	}
	
	~drsblobs() {
		talloc_free(self);
	}
	
	/* decode_replPropertyMetaData */
	void decode_replPropertyMetaData(struct replPropertyMetaDataBlob blob, TALLOC_CTX *mem_ctx = NULL)
	{
		struct decode_replPropertyMetaData r;
		NTSTATUS status;
		
		/* Fill r structure */
		r.in.blob = blob;
		
		status = dcerpc_decode_replPropertyMetaData(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* decode_replUpToDateVector */
	void decode_replUpToDateVector(struct replUpToDateVectorBlob blob, TALLOC_CTX *mem_ctx = NULL)
	{
		struct decode_replUpToDateVector r;
		NTSTATUS status;
		
		/* Fill r structure */
		r.in.blob = blob;
		
		status = dcerpc_decode_replUpToDateVector(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* decode_repsFromTo */
	void decode_repsFromTo(struct repsFromToBlob blob, TALLOC_CTX *mem_ctx = NULL)
	{
		struct decode_repsFromTo r;
		NTSTATUS status;
		
		/* Fill r structure */
		r.in.blob = blob;
		
		status = dcerpc_decode_repsFromTo(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* decode_ldapControlDirSync */
	void decode_ldapControlDirSync(struct ldapControlDirSyncCookie cookie, TALLOC_CTX *mem_ctx = NULL)
	{
		struct decode_ldapControlDirSync r;
		NTSTATUS status;
		
		/* Fill r structure */
		r.in.cookie = cookie;
		
		status = dcerpc_decode_ldapControlDirSync(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* decode_DsCompressed */
	void decode_DsCompressed(struct DsCompressedBlob blob, TALLOC_CTX *mem_ctx = NULL)
	{
		struct decode_DsCompressed r;
		NTSTATUS status;
		
		/* Fill r structure */
		r.in.blob = blob;
		
		status = dcerpc_decode_DsCompressed(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
};

/* replPropertyMetaData1 */
/* replPropertyMetaDataCtr1 */
/* replPropertyMetaDataCtr */
/* replPropertyMetaDataBlob */
/* replUpToDateVectorCtr1 */
/* replUpToDateVectorCtr2 */
/* replUpToDateVectorCtr */
/* replUpToDateVectorBlob */
/* repsFromTo1OtherInfo */
/* repsFromTo1 */
/* repsFromTo */
/* repsFromToBlob */
/* ldapControlDirSyncExtraData */
/* ldapControlDirSyncExtra */
/* ldapControlDirSyncBlob */
/* ldapControlDirSyncCookie */
/* DsCompressedChunk */
/* DsCompressedBlob */

