/* This file is autogenerated by pidl. DO NOT EDIT */
%module dssetup

%{
#include "includes.h"
#include "auth/credentials/credentials.h"
#include "librpc/gen_ndr/ndr_dssetup_c.h"
#include "librpc/gen_ndr/dssetup.h"
%}
%import "samba.i"

%inline {
void ntstatus_exception(NTSTATUS status)
{
	/* FIXME */
}
}



%inline {
struct dssetup { struct dcerpc_pipe *pipe; };
}

%extend dssetup {
	dssetup (const char *binding, struct cli_credentials *cred = NULL, TALLOC_CTX *mem_ctx = NULL, struct event_context *event = NULL)
	{
		struct dssetup *ret = talloc(mem_ctx, struct dssetup);
		NTSTATUS status;
		
		status = dcerpc_pipe_connect(mem_ctx, &ret->pipe, binding, &dcerpc_table_dssetup, cred, event);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return NULL;
		}
		
		return ret;
	}
	
	~dssetup() {
		talloc_free(self);
	}
	
	/* dssetup_DsRoleGetPrimaryDomainInformation */
	WERROR DsRoleGetPrimaryDomainInformation(enum dssetup_DsRoleInfoLevel level, union dssetup_DsRoleInfo *info, TALLOC_CTX *mem_ctx = NULL)
	{
		struct dssetup_DsRoleGetPrimaryDomainInformation r;
		NTSTATUS status;
		
		/* Fill r structure */
		r.in.level = level;
		
		status = dcerpc_dssetup_DsRoleGetPrimaryDomainInformation(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		*info = *r.out.info;
		return r.out.result;
	}
	
	/* dssetup_DsRoleDnsNameToFlatName */
	WERROR DsRoleDnsNameToFlatName(TALLOC_CTX *mem_ctx = NULL)
	{
		struct dssetup_DsRoleDnsNameToFlatName r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_dssetup_DsRoleDnsNameToFlatName(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
	/* dssetup_DsRoleDcAsDc */
	WERROR DsRoleDcAsDc(TALLOC_CTX *mem_ctx = NULL)
	{
		struct dssetup_DsRoleDcAsDc r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_dssetup_DsRoleDcAsDc(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
	/* dssetup_DsRoleDcAsReplica */
	WERROR DsRoleDcAsReplica(TALLOC_CTX *mem_ctx = NULL)
	{
		struct dssetup_DsRoleDcAsReplica r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_dssetup_DsRoleDcAsReplica(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
	/* dssetup_DsRoleDemoteDc */
	WERROR DsRoleDemoteDc(TALLOC_CTX *mem_ctx = NULL)
	{
		struct dssetup_DsRoleDemoteDc r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_dssetup_DsRoleDemoteDc(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
	/* dssetup_DsRoleGetDcOperationProgress */
	WERROR DsRoleGetDcOperationProgress(TALLOC_CTX *mem_ctx = NULL)
	{
		struct dssetup_DsRoleGetDcOperationProgress r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_dssetup_DsRoleGetDcOperationProgress(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
	/* dssetup_DsRoleGetDcOperationResults */
	WERROR DsRoleGetDcOperationResults(TALLOC_CTX *mem_ctx = NULL)
	{
		struct dssetup_DsRoleGetDcOperationResults r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_dssetup_DsRoleGetDcOperationResults(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
	/* dssetup_DsRoleCancel */
	WERROR DsRoleCancel(TALLOC_CTX *mem_ctx = NULL)
	{
		struct dssetup_DsRoleCancel r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_dssetup_DsRoleCancel(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
	/* dssetup_DsRoleServerSaveStateForUpgrade */
	WERROR DsRoleServerSaveStateForUpgrade(TALLOC_CTX *mem_ctx = NULL)
	{
		struct dssetup_DsRoleServerSaveStateForUpgrade r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_dssetup_DsRoleServerSaveStateForUpgrade(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
	/* dssetup_DsRoleUpgradeDownlevelServer */
	WERROR DsRoleUpgradeDownlevelServer(TALLOC_CTX *mem_ctx = NULL)
	{
		struct dssetup_DsRoleUpgradeDownlevelServer r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_dssetup_DsRoleUpgradeDownlevelServer(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
	/* dssetup_DsRoleAbortDownlevelServerUpgrade */
	WERROR DsRoleAbortDownlevelServerUpgrade(TALLOC_CTX *mem_ctx = NULL)
	{
		struct dssetup_DsRoleAbortDownlevelServerUpgrade r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_dssetup_DsRoleAbortDownlevelServerUpgrade(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
};

/* dssetup_DsRole */
/* dssetup_DsRoleFlags */
/* dssetup_DsRolePrimaryDomInfoBasic */
/* dssetup_DsUpgrade */
/* dssetup_DsPrevious */
/* dssetup_DsRoleUpgradeStatus */
/* dssetup_DsRoleOp */
/* dssetup_DsRoleOpStatus */
/* dssetup_DsRoleInfoLevel */
/* dssetup_DsRoleInfo */

