/* This file is autogenerated by pidl. DO NOT EDIT */
%module wkssvc

%{
#include "includes.h"
#include "auth/credentials/credentials.h"
#include "librpc/gen_ndr/ndr_wkssvc_c.h"
#include "librpc/gen_ndr/wkssvc.h"
%}
%import "samba.i"

%inline {
void ntstatus_exception(NTSTATUS status)
{
	/* FIXME */
}
}



%inline {
struct wkssvc { struct dcerpc_pipe *pipe; };
}

%extend wkssvc {
	wkssvc (const char *binding, struct cli_credentials *cred = NULL, TALLOC_CTX *mem_ctx = NULL, struct event_context *event = NULL)
	{
		struct wkssvc *ret = talloc(mem_ctx, struct wkssvc);
		NTSTATUS status;
		
		status = dcerpc_pipe_connect(mem_ctx, &ret->pipe, binding, &dcerpc_table_wkssvc, cred, event);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return NULL;
		}
		
		return ret;
	}
	
	~wkssvc() {
		talloc_free(self);
	}
	
	/* wkssvc_NetWkstaGetInfo */
	WERROR NetWkstaGetInfo(const char *server_name, uint32_t level, union wkssvc_NetWkstaInfo *info, TALLOC_CTX *mem_ctx = NULL)
	{
		struct wkssvc_NetWkstaGetInfo r;
		NTSTATUS status;
		
		/* Fill r structure */
		r.in.server_name = server_name;
		r.in.level = level;
		
		status = dcerpc_wkssvc_NetWkstaGetInfo(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		*info = *r.out.info;
		return r.out.result;
	}
	
	/* wkssvc_NetWkstaSetInfo */
	WERROR NetWkstaSetInfo(const char *server_name, uint32_t level, union wkssvc_NetWkstaInfo *info, uint32_t *parm_error, TALLOC_CTX *mem_ctx = NULL)
	{
		struct wkssvc_NetWkstaSetInfo r;
		NTSTATUS status;
		
		/* Fill r structure */
		r.in.server_name = server_name;
		r.in.level = level;
		r.in.info = info;
		r.in.parm_error = parm_error;
		
		status = dcerpc_wkssvc_NetWkstaSetInfo(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		*parm_error = *r.out.parm_error;
		return r.out.result;
	}
	
	/* wkssvc_NetWkstaEnumUsers */
	WERROR NetWkstaEnumUsers(const char *server_name, uint32_t level, union WKS_USER_ENUM_UNION *users, uint32_t prefmaxlen, uint32_t *entriesread, uint32_t *totalentries, uint32_t *resumehandle, TALLOC_CTX *mem_ctx = NULL)
	{
		struct wkssvc_NetWkstaEnumUsers r;
		NTSTATUS status;
		
		/* Fill r structure */
		r.in.server_name = server_name;
		r.in.level = level;
		r.in.users = users;
		r.in.prefmaxlen = prefmaxlen;
		r.in.resumehandle = resumehandle;
		
		status = dcerpc_wkssvc_NetWkstaEnumUsers(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		*users = *r.out.users;
		*entriesread = *r.out.entriesread;
		*totalentries = *r.out.totalentries;
		*resumehandle = *r.out.resumehandle;
		return r.out.result;
	}
	
	/* WKSSVC_NETRWKSTAUSERGETINFO */
	WERROR WKSSVC_NETRWKSTAUSERGETINFO(TALLOC_CTX *mem_ctx = NULL)
	{
		struct WKSSVC_NETRWKSTAUSERGETINFO r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_WKSSVC_NETRWKSTAUSERGETINFO(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
	/* WKSSVC_NETRWKSTAUSERSETINFO */
	WERROR WKSSVC_NETRWKSTAUSERSETINFO(TALLOC_CTX *mem_ctx = NULL)
	{
		struct WKSSVC_NETRWKSTAUSERSETINFO r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_WKSSVC_NETRWKSTAUSERSETINFO(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
	/* wkssvc_NetWkstaTransportEnum */
	WERROR NetWkstaTransportEnum(const char *server_name, uint32_t level, union wkssvc_NetWkstaTransportCtr *ctr, uint32_t max_buffer, uint32_t totalentries, uint32_t *resume_handle, TALLOC_CTX *mem_ctx = NULL)
	{
		struct wkssvc_NetWkstaTransportEnum r;
		NTSTATUS status;
		
		/* Fill r structure */
		r.in.server_name = server_name;
		r.in.level = level;
		r.in.ctr = ctr;
		r.in.max_buffer = max_buffer;
		r.in.resume_handle = resume_handle;
		
		status = dcerpc_wkssvc_NetWkstaTransportEnum(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		/* FIXME: level [out] argument is not a pointer */
		*level = *r.out.level;
		*ctr = *r.out.ctr;
		/* FIXME: totalentries [out] argument is not a pointer */
		*totalentries = *r.out.totalentries;
		*resume_handle = *r.out.resume_handle;
		return r.out.result;
	}
	
	/* WKSSVC_NETRWKSTATRANSPORTADD */
	WERROR WKSSVC_NETRWKSTATRANSPORTADD(TALLOC_CTX *mem_ctx = NULL)
	{
		struct WKSSVC_NETRWKSTATRANSPORTADD r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_WKSSVC_NETRWKSTATRANSPORTADD(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
	/* WKSSVC_NETRWKSTATRANSPORTDEL */
	WERROR WKSSVC_NETRWKSTATRANSPORTDEL(TALLOC_CTX *mem_ctx = NULL)
	{
		struct WKSSVC_NETRWKSTATRANSPORTDEL r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_WKSSVC_NETRWKSTATRANSPORTDEL(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
	/* WKSSVC_NETRUSEADD */
	WERROR WKSSVC_NETRUSEADD(TALLOC_CTX *mem_ctx = NULL)
	{
		struct WKSSVC_NETRUSEADD r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_WKSSVC_NETRUSEADD(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
	/* WKSSVC_NETRUSEGETINFO */
	WERROR WKSSVC_NETRUSEGETINFO(TALLOC_CTX *mem_ctx = NULL)
	{
		struct WKSSVC_NETRUSEGETINFO r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_WKSSVC_NETRUSEGETINFO(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
	/* WKSSVC_NETRUSEDEL */
	WERROR WKSSVC_NETRUSEDEL(TALLOC_CTX *mem_ctx = NULL)
	{
		struct WKSSVC_NETRUSEDEL r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_WKSSVC_NETRUSEDEL(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
	/* WKSSVC_NETRUSEENUM */
	WERROR WKSSVC_NETRUSEENUM(TALLOC_CTX *mem_ctx = NULL)
	{
		struct WKSSVC_NETRUSEENUM r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_WKSSVC_NETRUSEENUM(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
	/* WKSSVC_NETRMESSAGEBUFFERSEND */
	WERROR WKSSVC_NETRMESSAGEBUFFERSEND(TALLOC_CTX *mem_ctx = NULL)
	{
		struct WKSSVC_NETRMESSAGEBUFFERSEND r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_WKSSVC_NETRMESSAGEBUFFERSEND(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
	/* WKSSVC_NETRWORKSTATIONSTATISTICSGET */
	WERROR WKSSVC_NETRWORKSTATIONSTATISTICSGET(TALLOC_CTX *mem_ctx = NULL)
	{
		struct WKSSVC_NETRWORKSTATIONSTATISTICSGET r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_WKSSVC_NETRWORKSTATIONSTATISTICSGET(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
	/* WKSSVC_NETRLOGONDOMAINNAMEADD */
	WERROR WKSSVC_NETRLOGONDOMAINNAMEADD(TALLOC_CTX *mem_ctx = NULL)
	{
		struct WKSSVC_NETRLOGONDOMAINNAMEADD r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_WKSSVC_NETRLOGONDOMAINNAMEADD(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
	/* WKSSVC_NETRLOGONDOMAINNAMEDEL */
	WERROR WKSSVC_NETRLOGONDOMAINNAMEDEL(TALLOC_CTX *mem_ctx = NULL)
	{
		struct WKSSVC_NETRLOGONDOMAINNAMEDEL r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_WKSSVC_NETRLOGONDOMAINNAMEDEL(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
	/* WKSSVC_NETRJOINDOMAIN */
	WERROR WKSSVC_NETRJOINDOMAIN(TALLOC_CTX *mem_ctx = NULL)
	{
		struct WKSSVC_NETRJOINDOMAIN r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_WKSSVC_NETRJOINDOMAIN(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
	/* WKSSVC_NETRUNJOINDOMAIN */
	WERROR WKSSVC_NETRUNJOINDOMAIN(TALLOC_CTX *mem_ctx = NULL)
	{
		struct WKSSVC_NETRUNJOINDOMAIN r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_WKSSVC_NETRUNJOINDOMAIN(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
	/* WKSSVC_NETRRENAMEMACHINEINDOMAIN */
	WERROR WKSSVC_NETRRENAMEMACHINEINDOMAIN(TALLOC_CTX *mem_ctx = NULL)
	{
		struct WKSSVC_NETRRENAMEMACHINEINDOMAIN r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_WKSSVC_NETRRENAMEMACHINEINDOMAIN(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
	/* WKSSVC_NETRVALIDATENAME */
	WERROR WKSSVC_NETRVALIDATENAME(TALLOC_CTX *mem_ctx = NULL)
	{
		struct WKSSVC_NETRVALIDATENAME r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_WKSSVC_NETRVALIDATENAME(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
	/* WKSSVC_NETRGETJOININFORMATION */
	WERROR WKSSVC_NETRGETJOININFORMATION(TALLOC_CTX *mem_ctx = NULL)
	{
		struct WKSSVC_NETRGETJOININFORMATION r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_WKSSVC_NETRGETJOININFORMATION(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
	/* WKSSVC_NETRGETJOINABLEOUS */
	WERROR WKSSVC_NETRGETJOINABLEOUS(TALLOC_CTX *mem_ctx = NULL)
	{
		struct WKSSVC_NETRGETJOINABLEOUS r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_WKSSVC_NETRGETJOINABLEOUS(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
	/* wkssvc_NetrJoinDomain2 */
	WERROR NetrJoinDomain2(const char *server_name, const char *domain_name, const char *account_name, const char *admin_account, struct wkssvc_PasswordBuffer *encrypted_password, uint32_t join_flags, TALLOC_CTX *mem_ctx = NULL)
	{
		struct wkssvc_NetrJoinDomain2 r;
		NTSTATUS status;
		
		/* Fill r structure */
		r.in.server_name = server_name;
		r.in.domain_name = domain_name;
		r.in.account_name = account_name;
		r.in.admin_account = admin_account;
		r.in.encrypted_password = encrypted_password;
		r.in.join_flags = join_flags;
		
		status = dcerpc_wkssvc_NetrJoinDomain2(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
	/* wkssvc_NetrUnjoinDomain2 */
	WERROR NetrUnjoinDomain2(const char *server_name, const char *account, struct wkssvc_PasswordBuffer *encrypted_password, uint32_t unjoin_flags, TALLOC_CTX *mem_ctx = NULL)
	{
		struct wkssvc_NetrUnjoinDomain2 r;
		NTSTATUS status;
		
		/* Fill r structure */
		r.in.server_name = server_name;
		r.in.account = account;
		r.in.encrypted_password = encrypted_password;
		r.in.unjoin_flags = unjoin_flags;
		
		status = dcerpc_wkssvc_NetrUnjoinDomain2(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
	/* wkssvc_NetrRenameMachineInDomain2 */
	WERROR NetrRenameMachineInDomain2(const char *server_name, const char *NewMachineName, const char *Account, struct wkssvc_PasswordBuffer *EncryptedPassword, uint32_t RenameOptions, TALLOC_CTX *mem_ctx = NULL)
	{
		struct wkssvc_NetrRenameMachineInDomain2 r;
		NTSTATUS status;
		
		/* Fill r structure */
		r.in.server_name = server_name;
		r.in.NewMachineName = NewMachineName;
		r.in.Account = Account;
		r.in.EncryptedPassword = EncryptedPassword;
		r.in.RenameOptions = RenameOptions;
		
		status = dcerpc_wkssvc_NetrRenameMachineInDomain2(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
	/* WKSSVC_NETRVALIDATENAME2 */
	WERROR WKSSVC_NETRVALIDATENAME2(TALLOC_CTX *mem_ctx = NULL)
	{
		struct WKSSVC_NETRVALIDATENAME2 r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_WKSSVC_NETRVALIDATENAME2(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
	/* WKSSVC_NETRGETJOINABLEOUS2 */
	WERROR WKSSVC_NETRGETJOINABLEOUS2(TALLOC_CTX *mem_ctx = NULL)
	{
		struct WKSSVC_NETRGETJOINABLEOUS2 r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_WKSSVC_NETRGETJOINABLEOUS2(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
	/* wkssvc_NetrAddAlternateComputerName */
	WERROR NetrAddAlternateComputerName(const char *server_name, const char *NewAlternateMachineName, const char *Account, struct wkssvc_PasswordBuffer *EncryptedPassword, uint32_t Reserved, TALLOC_CTX *mem_ctx = NULL)
	{
		struct wkssvc_NetrAddAlternateComputerName r;
		NTSTATUS status;
		
		/* Fill r structure */
		r.in.server_name = server_name;
		r.in.NewAlternateMachineName = NewAlternateMachineName;
		r.in.Account = Account;
		r.in.EncryptedPassword = EncryptedPassword;
		r.in.Reserved = Reserved;
		
		status = dcerpc_wkssvc_NetrAddAlternateComputerName(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
	/* wkssvc_NetrRemoveAlternateComputerName */
	WERROR NetrRemoveAlternateComputerName(const char *server_name, const char *AlternateMachineNameToRemove, const char *Account, struct wkssvc_PasswordBuffer *EncryptedPassword, uint32_t Reserved, TALLOC_CTX *mem_ctx = NULL)
	{
		struct wkssvc_NetrRemoveAlternateComputerName r;
		NTSTATUS status;
		
		/* Fill r structure */
		r.in.server_name = server_name;
		r.in.AlternateMachineNameToRemove = AlternateMachineNameToRemove;
		r.in.Account = Account;
		r.in.EncryptedPassword = EncryptedPassword;
		r.in.Reserved = Reserved;
		
		status = dcerpc_wkssvc_NetrRemoveAlternateComputerName(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
	/* WKSSVC_NETRSETPRIMARYCOMPUTERNAME */
	WERROR WKSSVC_NETRSETPRIMARYCOMPUTERNAME(TALLOC_CTX *mem_ctx = NULL)
	{
		struct WKSSVC_NETRSETPRIMARYCOMPUTERNAME r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_WKSSVC_NETRSETPRIMARYCOMPUTERNAME(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
	/* WKSSVC_NETRENUMERATECOMPUTERNAMES */
	WERROR WKSSVC_NETRENUMERATECOMPUTERNAMES(TALLOC_CTX *mem_ctx = NULL)
	{
		struct WKSSVC_NETRENUMERATECOMPUTERNAMES r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_WKSSVC_NETRENUMERATECOMPUTERNAMES(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
};

/* wkssvc_NetWkstaInfo100 */
/* wkssvc_NetWkstaInfo101 */
/* wkssvc_NetWkstaInfo102 */
/* wkssvc_NetWkstaInfo502 */
/* wkssvc_NetWkstaInfo1010 */
/* wkssvc_NetWkstaInfo1011 */
/* wkssvc_NetWkstaInfo1012 */
/* wkssvc_NetWkstaInfo1013 */
/* wkssvc_NetWkstaInfo1018 */
/* wkssvc_NetWkstaInfo1023 */
/* wkssvc_NetWkstaInfo1027 */
/* wkssvc_NetWkstaInfo1033 */
/* wkssvc_NetWkstaInfo */
/* USER_INFO_0 */
/* USER_INFO_0_CONTAINER */
/* USER_INFO_1 */
/* USER_INFO_1_CONTAINER */
/* WKS_USER_ENUM_UNION */
/* wkssvc_NetWkstaTransportInfo0 */
/* wkssvc_NetWkstaTransportCtr0 */
/* wkssvc_NetWkstaTransportCtr */
/* wkssvc_PasswordBuffer */
/* wkssvc_joinflags */
/* wkssvc_renameflags */

