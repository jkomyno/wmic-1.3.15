/* This file is autogenerated by pidl. DO NOT EDIT */
%module initshutdown

%{
#include "includes.h"
#include "auth/credentials/credentials.h"
#include "librpc/gen_ndr/ndr_initshutdown_c.h"
#include "librpc/gen_ndr/initshutdown.h"
%}
%import "samba.i"

%inline {
void ntstatus_exception(NTSTATUS status)
{
	/* FIXME */
}
}

%types(initshutdown_String);


%inline {
struct initshutdown { struct dcerpc_pipe *pipe; };
}

%extend initshutdown {
	initshutdown (const char *binding, struct cli_credentials *cred = NULL, TALLOC_CTX *mem_ctx = NULL, struct event_context *event = NULL)
	{
		struct initshutdown *ret = talloc(mem_ctx, struct initshutdown);
		NTSTATUS status;
		
		status = dcerpc_pipe_connect(mem_ctx, &ret->pipe, binding, &dcerpc_table_initshutdown, cred, event);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return NULL;
		}
		
		return ret;
	}
	
	~initshutdown() {
		talloc_free(self);
	}
	
	/* initshutdown_Init */
	WERROR Init(uint16_t *hostname, struct initshutdown_String *message, uint32_t timeout, uint8_t force_apps, uint8_t reboot, TALLOC_CTX *mem_ctx = NULL)
	{
		struct initshutdown_Init r;
		NTSTATUS status;
		
		/* Fill r structure */
		r.in.hostname = hostname;
		r.in.message = message;
		r.in.timeout = timeout;
		r.in.force_apps = force_apps;
		r.in.reboot = reboot;
		
		status = dcerpc_initshutdown_Init(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
	/* initshutdown_Abort */
	WERROR Abort(uint16_t *server, TALLOC_CTX *mem_ctx = NULL)
	{
		struct initshutdown_Abort r;
		NTSTATUS status;
		
		/* Fill r structure */
		r.in.server = server;
		
		status = dcerpc_initshutdown_Abort(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
	/* initshutdown_InitEx */
	WERROR InitEx(uint16_t *hostname, struct initshutdown_String *message, uint32_t timeout, uint8_t force_apps, uint8_t reboot, uint32_t reason, TALLOC_CTX *mem_ctx = NULL)
	{
		struct initshutdown_InitEx r;
		NTSTATUS status;
		
		/* Fill r structure */
		r.in.hostname = hostname;
		r.in.message = message;
		r.in.timeout = timeout;
		r.in.force_apps = force_apps;
		r.in.reboot = reboot;
		r.in.reason = reason;
		
		status = dcerpc_initshutdown_InitEx(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
};

/* initshutdown_String_sub */
/* initshutdown_String */

