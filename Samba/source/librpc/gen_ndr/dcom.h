/* header auto-generated by pidl */

#include "librpc/gen_ndr/orpc.h"
#ifndef _HEADER_dcom_Unknown
#define _HEADER_dcom_Unknown


struct UseProtSeq {
	int _dummy_element;
};


struct GetCustomProtseqInfo {
	int _dummy_element;
};


struct UpdateResolverBindings {
	int _dummy_element;
};

#endif /* _HEADER_dcom_Unknown */
#ifndef _HEADER_IUnknown
#define _HEADER_IUnknown


struct QueryInterface {
	struct {
		struct ORPCTHIS ORPCthis;
		struct GUID *iid;/* [unique] */
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		struct MInterfacePointer **data;/* [ref,iid_is(riid)] */
		WERROR result;
	} out;

};


struct AddRef {
	struct {
		struct ORPCTHIS ORPCthis;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		uint32_t result;
	} out;

};


struct Release {
	struct {
		struct ORPCTHIS ORPCthis;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		uint32_t result;
	} out;

};

#endif /* _HEADER_IUnknown */
#ifndef _HEADER_IClassFactory
#define _HEADER_IClassFactory


struct CreateInstance {
	struct {
		struct ORPCTHIS ORPCthis;
		struct MInterfacePointer *pUnknown;/* [unique] */
		struct GUID *iid;/* [unique] */
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		struct MInterfacePointer **ppv;/* [ref,iid_is(riid)] */
		WERROR result;
	} out;

};


struct RemoteCreateInstance {
	struct {
		struct ORPCTHIS ORPCthis;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		WERROR result;
	} out;

};


struct LockServer {
	struct {
		struct ORPCTHIS ORPCthis;
		uint8_t lock;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		WERROR result;
	} out;

};


struct RemoteLockServer {
	struct {
		struct ORPCTHIS ORPCthis;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		WERROR result;
	} out;

};

#endif /* _HEADER_IClassFactory */
#ifndef _HEADER_IRemUnknown
#define _HEADER_IRemUnknown

struct REMQIRESULT {
	WERROR hResult;
	struct STDOBJREF std;
}/* [public] */;

struct REMINTERFACEREF {
	struct GUID ipid;
	uint32_t cPublicRefs;
	uint32_t cPrivateRefs;
};


struct RemQueryInterface {
	struct {
		struct ORPCTHIS ORPCthis;
		struct GUID *ripid;/* [ref] */
		uint32_t cRefs;
		uint16_t cIids;
		struct GUID *iids;/* [size_is(cIids)] */
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		struct REMQIRESULT **rqir;/* [ref,size_is(,cIids)] */
		WERROR result;
	} out;

};


struct RemAddRef {
	struct {
		struct ORPCTHIS ORPCthis;
		uint16_t cInterfaceRefs;
		struct REMINTERFACEREF *InterfaceRefs;/* [size_is(cInterfaceRefs)] */
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		WERROR **pResults;/* [ref,size_is(cInterfaceRefs)] */
		WERROR result;
	} out;

};


struct RemRelease {
	struct {
		struct ORPCTHIS ORPCthis;
		uint16_t cInterfaceRefs;
		struct REMINTERFACEREF *InterfaceRefs;/* [size_is(cInterfaceRefs)] */
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		WERROR result;
	} out;

};

#endif /* _HEADER_IRemUnknown */
#ifndef _HEADER_IClassActivator
#define _HEADER_IClassActivator


struct GetClassObject {
	struct {
		struct ORPCTHIS ORPCthis;
		struct GUID clsid;
		uint32_t context;
		uint32_t locale;
		struct GUID iid;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		struct MInterfacePointer *data;/* [ref,iid_is(iid)] */
	} out;

};

#endif /* _HEADER_IClassActivator */
#ifndef _HEADER_ISCMLocalActivator
#define _HEADER_ISCMLocalActivator


struct ISCMLocalActivator_CreateInstance {
	struct {
		struct ORPCTHIS ORPCthis;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		WERROR result;
	} out;

};

#endif /* _HEADER_ISCMLocalActivator */
#ifndef _HEADER_IMachineLocalActivator
#define _HEADER_IMachineLocalActivator


struct IMachineLocalActivator_foo {
	struct {
		WERROR result;
	} out;

};

#endif /* _HEADER_IMachineLocalActivator */
#ifndef _HEADER_ILocalObjectExporter
#define _HEADER_ILocalObjectExporter


struct ILocalObjectExporter_Foo {
	struct {
		WERROR result;
	} out;

};

#endif /* _HEADER_ILocalObjectExporter */
#ifndef _HEADER_ISystemActivator
#define _HEADER_ISystemActivator


struct ISystemActivatorRemoteCreateInstance {
	struct {
		struct ORPCTHIS ORPCthis;
		uint64_t unknown1;
		struct MInterfacePointer iface1;
		uint64_t unknown2;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		uint32_t *unknown3;/* [ref] */
		struct MInterfacePointer *iface2;/* [ref] */
		WERROR result;
	} out;

};

#endif /* _HEADER_ISystemActivator */
#ifndef _HEADER_IRemUnknown2
#define _HEADER_IRemUnknown2


struct RemQueryInterface2 {
	struct {
		struct ORPCTHIS ORPCthis;
		struct GUID *ripid;/* [unique] */
		uint16_t cIids;
		struct GUID **iids;/* [ref,size_is(cIids)] */
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		WERROR **phr;/* [ref,size_is(cIids)] */
		struct MInterfacePointer **ppMIF;/* [ref,size_is(cIids)] */
		WERROR result;
	} out;

};

#endif /* _HEADER_IRemUnknown2 */
#ifndef _HEADER_IDispatch
#define _HEADER_IDispatch

struct REF_ITypeInfo {
	char _empty_;
};

struct VARIANT {
	uint16_t vartype;
	uint16_t unknown;
};

struct DISPPARAMS {
	uint16_t unknown;
};

struct EXCEPINFO {
	uint16_t unknown;
};


struct GetTypeInfoCount {
	struct {
		struct ORPCTHIS ORPCthis;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		uint16_t *pctinfo;/* [ref] */
		WERROR result;
	} out;

};


struct GetTypeInfo {
	struct {
		struct ORPCTHIS ORPCthis;
		uint16_t iTInfo;
		uint32_t lcid;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		struct REF_ITypeInfo **ppTInfo;/* [ref] */
		WERROR result;
	} out;

};


struct GetIDsOfNames {
	struct {
		struct ORPCTHIS ORPCthis;
		struct GUID *riid;/* [unique] */
		uint16_t cNames;
		uint32_t lcid;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		uint32_t **rgDispId;/* [ref,size_is(cNames)] */
		WERROR result;
	} out;

};


struct Invoke {
	struct {
		struct ORPCTHIS ORPCthis;
		uint32_t dispIdMember;
		struct GUID *riid;/* [unique] */
		uint32_t lcid;
		uint16_t wFlags;
		struct DISPPARAMS *pDispParams;/* [unique] */
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		struct DISPPARAMS *pDispParams;/* [unique] */
		struct VARIANT **pVarResult;/* [ref] */
		struct EXCEPINFO **pExcepInfo;/* [ref] */
		uint16_t **puArgErr;/* [ref] */
		WERROR result;
	} out;

};

#endif /* _HEADER_IDispatch */
#ifndef _HEADER_IMarshal
#define _HEADER_IMarshal


struct MarshalInterface {
	struct {
		struct ORPCTHIS ORPCthis;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		WERROR result;
	} out;

};


struct UnMarshalInterface {
	struct {
		struct ORPCTHIS ORPCthis;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		WERROR result;
	} out;

};

#endif /* _HEADER_IMarshal */
#ifndef _HEADER_ICoffeeMachine
#define _HEADER_ICoffeeMachine


struct MakeCoffee {
	struct {
		struct ORPCTHIS ORPCthis;
		const char *flavor;/* [ref,string,charset(UTF16)] */
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		WERROR result;
	} out;

};

#endif /* _HEADER_ICoffeeMachine */
#ifndef _HEADER_IStream
#define _HEADER_IStream


struct Read {
	struct {
		struct ORPCTHIS ORPCthis;
		uint32_t num_requested;
		uint32_t *num_readx;/* [unique] */
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		uint8_t *pv;/* [length_is(*num_read),size_is(num_requested)] */
		uint32_t *num_read;/* [ref] */
		WERROR result;
	} out;

};


struct Write {
	struct {
		struct ORPCTHIS ORPCthis;
		uint8_t *data;/* [unique,size_is(num_requested)] */
		uint32_t num_requested;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		uint32_t *num_written;/* [ref] */
		WERROR result;
	} out;

};

#endif /* _HEADER_IStream */
#ifndef _HEADER_IWbemClassObject
#define _HEADER_IWbemClassObject


struct Delete {
	struct {
		struct ORPCTHIS ORPCthis;
		const char *wszName;/* [ref,string,charset(UTF16)] */
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		WERROR result;
	} out;

};

#endif /* _HEADER_IWbemClassObject */
#ifndef _HEADER_IWbemServices
#define _HEADER_IWbemServices

enum WBEMSTATUS {
	RPC_S_CALL_FAILED=1726,
	WBEM_NO_ERROR=0,
	WBEM_S_NO_ERROR=0,
	WBEM_S_SAME=0,
	WBEM_S_FALSE=1,
	WBEM_S_ALREADY_EXISTS=0x40001,
	WBEM_S_RESET_TO_DEFAULT=0x40002,
	WBEM_S_DIFFERENT=0x40003,
	WBEM_S_TIMEDOUT=0x40004,
	WBEM_S_NO_MORE_DATA=0x40005,
	WBEM_S_OPERATION_CANCELLED=0x40006,
	WBEM_S_PENDING=0x40007,
	WBEM_S_DUPLICATE_OBJECTS=0x40008,
	WBEM_S_ACCESS_DENIED=0x40009,
	WBEM_S_PARTIAL_RESULTS=0x40010,
	WBEM_S_NO_POSTHOOK=0x40011,
	WBEM_S_POSTHOOK_WITH_BOTH=0x40012,
	WBEM_S_POSTHOOK_WITH_NEW=0x40013,
	WBEM_S_POSTHOOK_WITH_STATUS=0x40014,
	WBEM_S_POSTHOOK_WITH_OLD=0x40015,
	WBEM_S_REDO_PREHOOK_WITH_ORIGINAL_OBJECT=0x40016,
	WBEM_S_SOURCE_NOT_AVAILABLE=0x40017,
	WBEM_E_FAILED=0x80041001,
	WBEM_E_NOT_FOUND=0x80041002,
	WBEM_E_ACCESS_DENIED=0x80041003,
	WBEM_E_PROVIDER_FAILURE=0x80041004,
	WBEM_E_TYPE_MISMATCH=0x80041005,
	WBEM_E_OUT_OF_MEMORY=0x80041006,
	WBEM_E_INVALID_CONTEXT=0x80041007,
	WBEM_E_INVALID_PARAMETER=0x80041008,
	WBEM_E_NOT_AVAILABLE=0x80041009,
	WBEM_E_CRITICAL_ERROR=0x8004100A,
	WBEM_E_INVALID_STREAM=0x8004100B,
	WBEM_E_NOT_SUPPORTED=0x8004100C,
	WBEM_E_INVALID_SUPERCLASS=0x8004100D,
	WBEM_E_INVALID_NAMESPACE=0x8004100E,
	WBEM_E_INVALID_OBJECT=0x8004100F,
	WBEM_E_INVALID_CLASS=0x80041010,
	WBEM_E_PROVIDER_NOT_FOUND=0x80041011,
	WBEM_E_INVALID_PROVIDER_REGISTRATION=0x80041012,
	WBEM_E_PROVIDER_LOAD_FAILURE=0x80041013,
	WBEM_E_INITIALIZATION_FAILURE=0x80041014,
	WBEM_E_TRANSPORT_FAILURE=0x80041015,
	WBEM_E_INVALID_OPERATION=0x80041016,
	WBEM_E_INVALID_QUERY=0x80041017,
	WBEM_E_INVALID_QUERY_TYPE=0x80041018,
	WBEM_E_ALREADY_EXISTS=0x80041019,
	WBEM_E_OVERRIDE_NOT_ALLOWED=0x8004101A,
	WBEM_E_PROPAGATED_QUALIFIER=0x8004101B,
	WBEM_E_PROPAGATED_PROPERTY=0x8004101C,
	WBEM_E_UNEXPECTED=0x8004101D,
	WBEM_E_ILLEGAL_OPERATION=0x8004101E,
	WBEM_E_CANNOT_BE_KEY=0x8004101F,
	WBEM_E_INCOMPLETE_CLASS=0x80041020,
	WBEM_E_INVALID_SYNTAX=0x80041021,
	WBEM_E_NONDECORATED_OBJECT=0x80041022,
	WBEM_E_READ_ONLY=0x80041023,
	WBEM_E_PROVIDER_NOT_CAPABLE=0x80041024,
	WBEM_E_CLASS_HAS_CHILDREN=0x80041025,
	WBEM_E_CLASS_HAS_INSTANCES=0x80041026,
	WBEM_E_QUERY_NOT_IMPLEMENTED=0x80041027,
	WBEM_E_ILLEGAL_NULL=0x80041028,
	WBEM_E_INVALID_QUALIFIER_TYPE=0x80041029,
	WBEM_E_INVALID_PROPERTY_TYPE=0x8004102A,
	WBEM_E_VALUE_OUT_OF_RANGE=0x8004102B,
	WBEM_E_CANNOT_BE_SINGLETON=0x8004102C,
	WBEM_E_INVALID_CIM_TYPE=0x8004102D,
	WBEM_E_INVALID_METHOD=0x8004102E,
	WBEM_E_INVALID_METHOD_PARAMETERS=0x8004102F,
	WBEM_E_SYSTEM_PROPERTY=0x80041030,
	WBEM_E_INVALID_PROPERTY=0x80041031,
	WBEM_E_CALL_CANCELLED=0x80041032,
	WBEM_E_SHUTTING_DOWN=0x80041033,
	WBEM_E_PROPAGATED_METHOD=0x80041034,
	WBEM_E_UNSUPPORTED_PARAMETER=0x80041035,
	WBEM_E_MISSING_PARAMETER_ID=0x80041036,
	WBEM_E_INVALID_PARAMETER_ID=0x80041037,
	WBEM_E_NONCONSECUTIVE_PARAMETER_IDS=0x80041038,
	WBEM_E_PARAMETER_ID_ON_RETVAL=0x80041039,
	WBEM_E_INVALID_OBJECT_PATH=0x8004103A,
	WBEM_E_OUT_OF_DISK_SPACE=0x8004103B,
	WBEM_E_BUFFER_TOO_SMALL=0x8004103C,
	WBEM_E_UNSUPPORTED_PUT_EXTENSION=0x8004103D,
	WBEM_E_UNKNOWN_OBJECT_TYPE=0x8004103E,
	WBEM_E_UNKNOWN_PACKET_TYPE=0x8004103F,
	WBEM_E_MARSHAL_VERSION_MISMATCH=0x80041040,
	WBEM_E_MARSHAL_INVALID_SIGNATURE=0x80041041,
	WBEM_E_INVALID_QUALIFIER=0x80041042,
	WBEM_E_INVALID_DUPLICATE_PARAMETER=0x80041043,
	WBEM_E_TOO_MUCH_DATA=0x80041044,
	WBEM_E_SERVER_TOO_BUSY=0x80041045,
	WBEM_E_INVALID_FLAVOR=0x80041046,
	WBEM_E_CIRCULAR_REFERENCE=0x80041047,
	WBEM_E_UNSUPPORTED_CLASS_UPDATE=0x80041048,
	WBEM_E_CANNOT_CHANGE_KEY_INHERITANCE=0x80041049,
	WBEM_E_CANNOT_CHANGE_INDEX_INHERITANCE=0x80041050,
	WBEM_E_TOO_MANY_PROPERTIES=0x80041051,
	WBEM_E_UPDATE_TYPE_MISMATCH=0x80041052,
	WBEM_E_UPDATE_OVERRIDE_NOT_ALLOWED=0x80041053,
	WBEM_E_UPDATE_PROPAGATED_METHOD=0x80041054,
	WBEM_E_METHOD_NOT_IMPLEMENTED=0x80041055,
	WBEM_E_METHOD_DISABLED=0x80041056,
	WBEM_E_REFRESHER_BUSY=0x80041057,
	WBEM_E_UNPARSABLE_QUERY=0x80041058,
	WBEM_E_NOT_EVENT_CLASS=0x80041059,
	WBEM_E_MISSING_GROUP_WITHIN=0x8004105A,
	WBEM_E_MISSING_AGGREGATION_LIST=0x8004105B,
	WBEM_E_PROPERTY_NOT_AN_OBJECT=0x8004105C,
	WBEM_E_AGGREGATING_BY_OBJECT=0x8004105D,
	WBEM_E_UNINTERPRETABLE_PROVIDER_QUERY=0x8004105F,
	WBEM_E_BACKUP_RESTORE_WINMGMT_RUNNING=0x80041060,
	WBEM_E_QUEUE_OVERFLOW=0x80041061,
	WBEM_E_PRIVILEGE_NOT_HELD=0x80041062,
	WBEM_E_INVALID_OPERATOR=0x80041063,
	WBEM_E_LOCAL_CREDENTIALS=0x80041064,
	WBEM_E_CANNOT_BE_ABSTRACT=0x80041065,
	WBEM_E_AMENDED_OBJECT=0x80041066,
	WBEM_E_CLIENT_TOO_SLOW=0x80041067,
	WBEM_E_NULL_SECURITY_DESCRIPTOR=0x80041068,
	WBEM_E_TIMED_OUT=0x80041069,
	WBEM_E_INVALID_ASSOCIATION=0x8004106A,
	WBEM_E_AMBIGUOUS_OPERATION=0x8004106B,
	WBEM_E_QUOTA_VIOLATION=0x8004106C,
	WBEM_E_RESERVED_001=0x8004106D,
	WBEM_E_RESERVED_002=0x8004106E,
	WBEM_E_UNSUPPORTED_LOCALE=0x8004106F,
	WBEM_E_HANDLE_OUT_OF_DATE=0x80041070,
	WBEM_E_CONNECTION_FAILED=0x80041071,
	WBEM_E_INVALID_HANDLE_REQUEST=0x80041072,
	WBEM_E_PROPERTY_NAME_TOO_WIDE=0x80041073,
	WBEM_E_CLASS_NAME_TOO_WIDE=0x80041074,
	WBEM_E_METHOD_NAME_TOO_WIDE=0x80041075,
	WBEM_E_QUALIFIER_NAME_TOO_WIDE=0x80041076,
	WBEM_E_RERUN_COMMAND=0x80041077,
	WBEM_E_DATABASE_VER_MISMATCH=0x80041078,
	WBEM_E_VETO_DELETE=0x80041079,
	WBEM_E_VETO_PUT=0x8004107A,
	WBEM_E_INVALID_LOCALE=0x80041080,
	WBEM_E_PROVIDER_SUSPENDED=0x80041081,
	WBEM_E_SYNCHRONIZATION_REQUIRED=0x80041082,
	WBEM_E_NO_SCHEMA=0x80041083,
	WBEM_E_PROVIDER_ALREADY_REGISTERED=0x80041084,
	WBEM_E_PROVIDER_NOT_REGISTERED=0x80041085,
	WBEM_E_FATAL_TRANSPORT_ERROR=0x80041086,
	WBEM_E_ENCRYPTED_CONNECTION_REQUIRED=0x80041087,
	WBEM_E_PROVIDER_TIMED_OUT=0x80041088,
	WBEM_E_NO_KEY=0x80041089,
	WBEM_E_PROVIDER_DISABLED=0x8004108a
};

enum WBEM_GENERIC_FLAG_TYPE {
	WBEM_FLAG_RETURN_IMMEDIATELY=0x10,
	WBEM_FLAG_RETURN_WBEM_COMPLETE=0,
	WBEM_FLAG_BIDIRECTIONAL=0,
	WBEM_FLAG_FORWARD_ONLY=0x20,
	WBEM_FLAG_NO_ERROR_OBJECT=0x40,
	WBEM_FLAG_RETURN_ERROR_OBJECT=0,
	WBEM_FLAG_SEND_STATUS=0x80,
	WBEM_FLAG_DONT_SEND_STATUS=0,
	WBEM_FLAG_ENSURE_LOCATABLE=0x100,
	WBEM_FLAG_DIRECT_READ=0x200,
	WBEM_FLAG_SEND_ONLY_SELECTED=0,
	WBEM_RETURN_WHEN_COMPLETE=0,
	WBEM_RETURN_IMMEDIATELY=0x10,
	WBEM_MASK_RESERVED_FLAGS=0x1F000,
	WBEM_FLAG_USE_AMENDED_QUALIFIERS=0x20000,
	WBEM_FLAG_STRONG_VALIDATION=0x100000
};

enum WBEM_TIMEOUT_TYPE {
	WBEM_NO_WAIT=0,
	WBEM_INFINITE=0xFFFFFFFF
};

typedef const char *CIMSTRING;

enum CIMTYPE_ENUMERATION {
	CIM_EMPTY=0,
	CIM_SINT8=16,
	CIM_UINT8=17,
	CIM_SINT16=2,
	CIM_UINT16=18,
	CIM_SINT32=3,
	CIM_UINT32=19,
	CIM_SINT64=20,
	CIM_UINT64=21,
	CIM_REAL32=4,
	CIM_REAL64=5,
	CIM_BOOLEAN=11,
	CIM_STRING=8,
	CIM_DATETIME=101,
	CIM_REFERENCE=102,
	CIM_CHAR16=103,
	CIM_OBJECT=13,
	CIM_FLAG_ARRAY=0x2000,
	CIM_ARR_SINT8=CIM_FLAG_ARRAY|CIM_SINT8,
	CIM_ARR_UINT8=CIM_FLAG_ARRAY|CIM_UINT8,
	CIM_ARR_SINT16=CIM_FLAG_ARRAY|CIM_SINT16,
	CIM_ARR_UINT16=CIM_FLAG_ARRAY|CIM_UINT16,
	CIM_ARR_SINT32=CIM_FLAG_ARRAY|CIM_SINT32,
	CIM_ARR_UINT32=CIM_FLAG_ARRAY|CIM_UINT32,
	CIM_ARR_SINT64=CIM_FLAG_ARRAY|CIM_SINT64,
	CIM_ARR_UINT64=CIM_FLAG_ARRAY|CIM_UINT64,
	CIM_ARR_REAL32=CIM_FLAG_ARRAY|CIM_REAL32,
	CIM_ARR_REAL64=CIM_FLAG_ARRAY|CIM_REAL64,
	CIM_ARR_BOOLEAN=CIM_FLAG_ARRAY|CIM_BOOLEAN,
	CIM_ARR_STRING=CIM_FLAG_ARRAY|CIM_STRING,
	CIM_ARR_DATETIME=CIM_FLAG_ARRAY|CIM_DATETIME,
	CIM_ARR_REFERENCE=CIM_FLAG_ARRAY|CIM_REFERENCE,
	CIM_ARR_CHAR16=CIM_FLAG_ARRAY|CIM_CHAR16,
	CIM_ARR_OBJECT=CIM_FLAG_ARRAY|CIM_OBJECT,
	CIM_ILLEGAL=0xfff,
	CIM_TYPEMASK=0x2FFF
};

struct arr_int8 {
	uint32_t count;
	int8_t *item;
}/* [public] */;

struct arr_uint8 {
	uint32_t count;
	uint8_t *item;
}/* [public] */;

struct arr_int16 {
	uint32_t count;
	int16_t *item;
}/* [public] */;

struct arr_uint16 {
	uint32_t count;
	uint16_t *item;
}/* [public] */;

struct arr_int32 {
	uint32_t count;
	int32_t *item;
}/* [public] */;

struct arr_uint32 {
	uint32_t count;
	uint32_t *item;
}/* [public] */;

struct arr_dlong {
	uint32_t count;
	int64_t *item;
}/* [public] */;

struct arr_udlong {
	uint32_t count;
	uint64_t *item;
}/* [public] */;

struct arr_CIMSTRING {
	uint32_t count;
	CIMSTRING *item;/* [relative,string,charset(UTF16)] */
}/* [public] */;

struct arr_WbemClassObject {
	uint32_t count;
	struct WbemClassObject **item;/* [relative,subcontext(4)] */
}/* [public] */;

union CIMVAR {
	int8_t v_sint8;/* [case(CIM_SINT8)] */
	uint8_t v_uint8;/* [case(CIM_UINT8)] */
	int16_t v_sint16;/* [case(CIM_SINT16)] */
	uint16_t v_uint16;/* [case(CIM_UINT16)] */
	int32_t v_sint32;/* [case(CIM_SINT32)] */
	uint32_t v_uint32;/* [case(CIM_UINT32)] */
	int64_t v_sint64;/* [case(CIM_SINT64)] */
	uint64_t v_uint64;/* [case(CIM_UINT64)] */
	uint32_t v_real32;/* [case(CIM_REAL32)] */
	uint64_t v_real64;/* [case(CIM_REAL64)] */
	uint16_t v_boolean;/* [case(CIM_BOOLEAN)] */
	CIMSTRING v_string;/* [relative,string,charset(UTF16),case(CIM_STRING)] */
	CIMSTRING v_datetime;/* [relative,string,charset(UTF16),case(CIM_DATETIME)] */
	CIMSTRING v_reference;/* [relative,string,charset(UTF16),case(CIM_REFERENCE)] */
	struct WbemClassObject *v_object;/* [relative,subcontext(4),case(CIM_OBJECT)] */
	struct arr_int8 *a_sint8;/* [relative,case(CIM_ARR_SINT8)] */
	struct arr_uint8 *a_uint8;/* [relative,case(CIM_ARR_UINT8)] */
	struct arr_int16 *a_sint16;/* [relative,case(CIM_ARR_SINT16)] */
	struct arr_uint16 *a_uint16;/* [relative,case(CIM_ARR_UINT16)] */
	struct arr_int32 *a_sint32;/* [relative,case(CIM_ARR_SINT32)] */
	struct arr_uint32 *a_uint32;/* [relative,case(CIM_ARR_UINT32)] */
	struct arr_dlong *a_sint64;/* [relative,case(CIM_ARR_SINT64)] */
	struct arr_udlong *a_uint64;/* [relative,case(CIM_ARR_UINT64)] */
	struct arr_uint32 *a_real32;/* [relative,case(CIM_ARR_REAL32)] */
	struct arr_udlong *a_real64;/* [relative,case(CIM_ARR_REAL64)] */
	struct arr_uint16 *a_boolean;/* [relative,case(CIM_ARR_BOOLEAN)] */
	struct arr_CIMSTRING *a_string;/* [relative,case(CIM_ARR_STRING)] */
	struct arr_CIMSTRING *a_datetime;/* [relative,case(CIM_ARR_DATETIME)] */
	struct arr_CIMSTRING *a_reference;/* [relative,case(CIM_ARR_REFERENCE)] */
	struct arr_WbemClassObject *a_object;/* [relative,case(CIM_ARR_OBJECT)] */
}/* [public,nodiscriminant] */;

/* bitmap WBEM_FLAVOR_TYPE */
#define WBEM_FLAVOR_FLAG_PROPAGATE_TO_INSTANCE ( 0x1 )
#define WBEM_FLAVOR_FLAG_PROPAGATE_TO_DERIVED_CLASS ( 0x2 )
#define WBEM_FLAVOR_NOT_OVERRIDABLE ( 0x10 )
#define WBEM_FLAVOR_ORIGIN_PROPAGATED ( 0x20 )
#define WBEM_FLAVOR_ORIGIN_SYSTEM ( 0x40 )
#define WBEM_FLAVOR_AMENDED ( 0x80 )

/* bitmap WCO_FLAGS */
#define WCF_DECORATIONS ( 1 )
#define WCF_INSTANCE ( 2 )
#define WCF_CLASS ( 4 )
#define WCF_CLASS_PART_INTERNAL ( 8 )

struct WbemQualifier {
	CIMSTRING name;/* [relative,string,charset(UTF16)] */
	uint8_t flavors;
	enum CIMTYPE_ENUMERATION cimtype;
	union CIMVAR value;/* [switch_is(cimtype)] */
}/* [nopush,public,nopull] */;

struct WbemQualifiers {
	uint32_t count;
	struct WbemQualifier **item;/* [ref] */
}/* [nopush,public,nopull] */;

struct WbemPropertyDesc {
	uint32_t cimtype;
	uint16_t nr;
	uint32_t offset;
	uint32_t depth;
	struct WbemQualifiers qualifiers;
}/* [public] */;

struct WbemProperty {
	CIMSTRING name;/* [relative,string,charset(UTF16)] */
	struct WbemPropertyDesc *desc;/* [relative] */
}/* [public] */;

struct CIMSTRINGS {
	uint32_t count;
	CIMSTRING *item;/* [ref,string,charset(UTF16)] */
}/* [nopull,public,nopush] */;

/* bitmap DEFAULT_FLAGS */
#define DEFAULT_FLAG_EMPTY ( 1 )
#define DEFAULT_FLAG_INHERITED ( 2 )

struct WbemClass {
	uint8_t u_0;
	CIMSTRING __CLASS;/* [relative,string,charset(UTF16),null_is_ffffffff] */
	uint32_t data_size;
	struct CIMSTRINGS __DERIVATION;
	struct WbemQualifiers qualifiers;
	uint32_t __PROPERTY_COUNT;
	struct WbemProperty *properties;
	uint8_t *default_flags;
	union CIMVAR *default_values;
}/* [noprint,nopush,public,nopull,flag(LIBNDR_FLAG_NOALIGN)] */;

struct WbemMethod {
	CIMSTRING name;/* [relative,string,charset(UTF16),null_is_ffffffff] */
	uint32_t u0;
	uint32_t u1;
	struct WbemQualifiers *qualifiers;/* [relative] */
	struct WbemClassObject *in;/* [relative,subcontext(4)] */
	struct WbemClassObject *out;/* [relative,subcontext(4)] */
}/* [public] */;

struct WbemMethods {
	uint16_t count;
	uint16_t u0;
	struct WbemMethod *method;
}/* [public,flag(LIBNDR_FLAG_NOALIGN)] */;

struct WbemInstance {
	uint8_t u1_0;
	CIMSTRING __CLASS;/* [relative,string,charset(UTF16)] */
	uint8_t *default_flags;/* [unique] */
	union CIMVAR *data;/* [unique] */
	uint32_t u2_4;
	uint8_t u3_1;
}/* [noprint,nopull,public,nopush,flag(LIBNDR_FLAG_NOALIGN)] */;

struct WbemClassObject {
	uint8_t flags;
	CIMSTRING __SERVER;/* [ref,string,charset(UTF16)] */
	CIMSTRING __NAMESPACE;/* [ref,string,charset(UTF16)] */
	struct WbemClass *sup_class;/* [unique] */
	struct WbemMethods *sup_methods;/* [unique] */
	struct WbemClass *obj_class;/* [unique] */
	struct WbemMethods *obj_methods;/* [unique] */
	struct WbemInstance *instance;/* [unique] */
}/* [noprint,nopush,public,nopull,flag(LIBNDR_FLAG_NOALIGN)] */;

typedef const char *BSTR;


struct OpenNamespace {
	struct {
		struct ORPCTHIS ORPCthis;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		WERROR result;
	} out;

};


struct CancelAsyncCall {
	struct {
		struct ORPCTHIS ORPCthis;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		WERROR result;
	} out;

};


struct QueryObjectSink {
	struct {
		struct ORPCTHIS ORPCthis;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		WERROR result;
	} out;

};


struct GetObject {
	struct {
		struct ORPCTHIS ORPCthis;
		BSTR strObjectPath;/* [ref,string,charset(UTF16)] */
		int32_t lFlags;
		struct MInterfacePointer *pCtx;/* [unique] */
		struct MInterfacePointer **ppObject;/* [unique] */
		struct MInterfacePointer **ppCallResult;/* [unique] */
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		struct MInterfacePointer **ppObject;/* [unique] */
		struct MInterfacePointer **ppCallResult;/* [unique] */
		WERROR result;
	} out;

};


struct GetObjectAsync {
	struct {
		struct ORPCTHIS ORPCthis;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		WERROR result;
	} out;

};


struct PutClass {
	struct {
		struct ORPCTHIS ORPCthis;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		WERROR result;
	} out;

};


struct PutClassAsync {
	struct {
		struct ORPCTHIS ORPCthis;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		WERROR result;
	} out;

};


struct DeleteClass {
	struct {
		struct ORPCTHIS ORPCthis;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		WERROR result;
	} out;

};


struct DeleteClassAsync {
	struct {
		struct ORPCTHIS ORPCthis;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		WERROR result;
	} out;

};


struct CreateClassEnum {
	struct {
		struct ORPCTHIS ORPCthis;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		WERROR result;
	} out;

};


struct CreateClassEnumAsync {
	struct {
		struct ORPCTHIS ORPCthis;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		WERROR result;
	} out;

};


struct PutInstance {
	struct {
		struct ORPCTHIS ORPCthis;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		WERROR result;
	} out;

};


struct PutInstanceAsync {
	struct {
		struct ORPCTHIS ORPCthis;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		WERROR result;
	} out;

};


struct DeleteInstance {
	struct {
		struct ORPCTHIS ORPCthis;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		WERROR result;
	} out;

};


struct DeleteInstanceAsync {
	struct {
		struct ORPCTHIS ORPCthis;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		WERROR result;
	} out;

};


struct CreateInstanceEnum {
	struct {
		struct ORPCTHIS ORPCthis;
		BSTR strFilter;/* [ref,string,charset(UTF16)] */
		int32_t lFlags;
		struct MInterfacePointer *pCtx;/* [unique] */
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		struct MInterfacePointer **ppEnum;/* [ref] */
		WERROR result;
	} out;

};


struct CreateInstanceEnumAsync {
	struct {
		struct ORPCTHIS ORPCthis;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		WERROR result;
	} out;

};


struct ExecQuery {
	struct {
		struct ORPCTHIS ORPCthis;
		BSTR strQueryLanguage;/* [ref,string,charset(UTF16)] */
		BSTR strQuery;/* [ref,string,charset(UTF16)] */
		int32_t lFlags;
		struct MInterfacePointer *pCtx;/* [unique] */
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		struct MInterfacePointer **ppEnum;/* [ref] */
		WERROR result;
	} out;

};


struct ExecQueryAsync {
	struct {
		struct ORPCTHIS ORPCthis;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		WERROR result;
	} out;

};


struct ExecNotificationQuery {
	struct {
		struct ORPCTHIS ORPCthis;
		BSTR strQueryLanguage;/* [ref,string,charset(UTF16)] */
		BSTR strQuery;/* [ref,string,charset(UTF16)] */
		int32_t lFlags;
		struct MInterfacePointer *pCtx;/* [unique] */
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		struct MInterfacePointer **ppEnum;/* [ref] */
		WERROR result;
	} out;

};


struct ExecNotificationQueryAsync {
	struct {
		struct ORPCTHIS ORPCthis;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		WERROR result;
	} out;

};


struct ExecMethod {
	struct {
		struct ORPCTHIS ORPCthis;
		BSTR strObjectPath;/* [ref,string,charset(UTF16)] */
		BSTR strMethodName;/* [ref,string,charset(UTF16)] */
		int32_t lFlags;
		struct MInterfacePointer *pCtx;/* [unique] */
		struct MInterfacePointer *pInParams;/* [unique] */
		struct MInterfacePointer **ppOutParams;/* [unique] */
		struct MInterfacePointer **ppCallResult;/* [unique] */
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		struct MInterfacePointer **ppOutParams;/* [unique] */
		struct MInterfacePointer **ppCallResult;/* [unique] */
		WERROR result;
	} out;

};


struct ExecMethodAsync {
	struct {
		struct ORPCTHIS ORPCthis;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		WERROR result;
	} out;

};

#endif /* _HEADER_IWbemServices */
#ifndef _HEADER_IEnumWbemClassObject
#define _HEADER_IEnumWbemClassObject


struct Reset {
	struct {
		struct ORPCTHIS ORPCthis;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		WERROR result;
	} out;

};


struct IEnumWbemClassObject_Next {
	struct {
		struct ORPCTHIS ORPCthis;
		int32_t lTimeout;
		uint32_t uCount;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		struct MInterfacePointer **apObjects;/* [ref,length_is(*puReturned),size_is(uCount)] */
		uint32_t *puReturned;/* [ref] */
		WERROR result;
	} out;

};


struct NextAsync {
	struct {
		struct ORPCTHIS ORPCthis;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		WERROR result;
	} out;

};


struct IEnumWbemClassObject_Clone {
	struct {
		struct ORPCTHIS ORPCthis;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		WERROR result;
	} out;

};


struct Skip {
	struct {
		struct ORPCTHIS ORPCthis;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		WERROR result;
	} out;

};

#endif /* _HEADER_IEnumWbemClassObject */
#ifndef _HEADER_IWbemContext
#define _HEADER_IWbemContext


struct Clone {
	struct {
		struct ORPCTHIS ORPCthis;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		struct MInterfacePointer **ppNewCopy;/* [ref] */
		WERROR result;
	} out;

};


struct GetNames {
	struct {
		struct ORPCTHIS ORPCthis;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		WERROR result;
	} out;

};


struct BeginEnumeration {
	struct {
		struct ORPCTHIS ORPCthis;
		int32_t lFlags;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		WERROR result;
	} out;

};


struct Next {
	struct {
		struct ORPCTHIS ORPCthis;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		WERROR result;
	} out;

};


struct EndEnumeration {
	struct {
		struct ORPCTHIS ORPCthis;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		WERROR result;
	} out;

};


struct SetValue {
	struct {
		struct ORPCTHIS ORPCthis;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		WERROR result;
	} out;

};


struct GetValue {
	struct {
		struct ORPCTHIS ORPCthis;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		WERROR result;
	} out;

};


struct DeleteValue {
	struct {
		struct ORPCTHIS ORPCthis;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		WERROR result;
	} out;

};


struct DeleteAll {
	struct {
		struct ORPCTHIS ORPCthis;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		WERROR result;
	} out;

};

#endif /* _HEADER_IWbemContext */
#ifndef _HEADER_IWbemLevel1Login
#define _HEADER_IWbemLevel1Login


struct EstablishPosition {
	struct {
		struct ORPCTHIS ORPCthis;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		WERROR result;
	} out;

};


struct RequestChallenge {
	struct {
		struct ORPCTHIS ORPCthis;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		WERROR result;
	} out;

};


struct WBEMLogin {
	struct {
		struct ORPCTHIS ORPCthis;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		WERROR result;
	} out;

};


struct NTLMLogin {
	struct {
		struct ORPCTHIS ORPCthis;
		const char *wszNetworkResource;/* [unique,string,charset(UTF16)] */
		const char *wszPreferredLocale;/* [unique,string,charset(UTF16)] */
		int32_t lFlags;
		struct MInterfacePointer *pCtx;/* [unique] */
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		struct MInterfacePointer **ppNamespace;/* [ref] */
		WERROR result;
	} out;

};

#endif /* _HEADER_IWbemLevel1Login */
#ifndef _HEADER_IWbemWCOSmartEnum
#define _HEADER_IWbemWCOSmartEnum

struct WBEMDATA {
	uint32_t size;
	uint8_t *data;
};

enum WTYPES {
	WTYPE_SCHEMA=1,
	WTYPE_CLASS=2,
	WTYPE_OBJECT=3
};

struct WBEMDATA4 {
	uint32_t data_size;
	uint8_t wtype;
}/* [relative_base] */;

struct WBEMDATA3 {
	struct WBEMDATA4 *data;/* [relative] */
	uint32_t data_size;
	uint8_t wtype;
}/* [relative_base] */;

struct WBEMDATA2 {
	struct WBEMDATA3 *data;/* [relative,size_is(obj_num)] */
	uint32_t data_size;
	uint32_t obj_num;
}/* [relative_base] */;

struct WBEMDATA1 {
	struct WBEMDATA2 *data;/* [relative] */
	uint32_t data_size;
}/* [relative_base] */;

struct WBEMDATA0 {
	uint32_t u1_0;
	uint64_t signature;
	struct WBEMDATA1 *data;/* [relative] */
	uint32_t data_size;
	uint32_t u2_0;
	uint8_t ver_major;
	uint8_t ver_minor;
}/* [relative_base] */;


struct IWbemWCOSmartEnum_Next {
	struct {
		struct ORPCTHIS ORPCthis;
		struct GUID *gEWCO;/* [ref] */
		uint32_t lTimeOut;
		uint32_t uCount;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		uint32_t *puReturned;/* [ref] */
		uint32_t *pSize;/* [ref] */
		uint8_t **pData;/* [noprint,ref,size_is(,*pSize)] */
		WERROR result;
	} out;

};

#endif /* _HEADER_IWbemWCOSmartEnum */
#ifndef _HEADER_IWbemFetchSmartEnum
#define _HEADER_IWbemFetchSmartEnum


struct Fetch {
	struct {
		struct ORPCTHIS ORPCthis;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		struct MInterfacePointer **ppEnum;/* [ref] */
		WERROR result;
	} out;

};


struct Test {
	struct {
		struct ORPCTHIS ORPCthis;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		struct WbemClassObject **ppEnum;/* [ref] */
		WERROR result;
	} out;

};

#endif /* _HEADER_IWbemFetchSmartEnum */
#ifndef _HEADER_IWbemCallResult
#define _HEADER_IWbemCallResult


struct GetResultObject {
	struct {
		struct ORPCTHIS ORPCthis;
		int32_t lTimeout;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		struct MInterfacePointer **ppResultObject;/* [ref] */
		WERROR result;
	} out;

};


struct GetResultString {
	struct {
		struct ORPCTHIS ORPCthis;
		int32_t lTimeout;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		WERROR result;
	} out;

};


struct GetResultServices {
	struct {
		struct ORPCTHIS ORPCthis;
		int32_t lTimeout;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		struct MInterfacePointer **ppServices;/* [ref] */
		WERROR result;
	} out;

};


struct GetCallStatus {
	struct {
		struct ORPCTHIS ORPCthis;
		int32_t lTimeout;
	} in;

	struct {
		struct ORPCTHAT *ORPCthat;/* [ref] */
		int32_t *plStatus;/* [ref] */
		WERROR result;
	} out;

};

#endif /* _HEADER_IWbemCallResult */
