/* This file is autogenerated by pidl. DO NOT EDIT */
%module remact

%{
#include "includes.h"
#include "auth/credentials/credentials.h"
#include "librpc/gen_ndr/ndr_remact_c.h"
#include "librpc/gen_ndr/remact.h"
%}
%import "samba.i"

%inline {
void ntstatus_exception(NTSTATUS status)
{
	/* FIXME */
}
}



%inline {
struct IRemoteActivation { struct dcerpc_pipe *pipe; };
}

%extend IRemoteActivation {
	IRemoteActivation (const char *binding, struct cli_credentials *cred = NULL, TALLOC_CTX *mem_ctx = NULL, struct event_context *event = NULL)
	{
		struct IRemoteActivation *ret = talloc(mem_ctx, struct IRemoteActivation);
		NTSTATUS status;
		
		status = dcerpc_pipe_connect(mem_ctx, &ret->pipe, binding, &dcerpc_table_IRemoteActivation, cred, event);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return NULL;
		}
		
		return ret;
	}
	
	~IRemoteActivation() {
		talloc_free(self);
	}
	
	/* RemoteActivation */
	WERROR RemoteActivation(struct ORPCTHIS this, struct ORPCTHAT *that, struct GUID Clsid, const char *pwszObjectName, struct MInterfacePointer *pObjectStorage, uint32_t ClientImpLevel, uint32_t Mode, uint32_t Interfaces, struct GUID *pIIDs, uint16_t num_protseqs, uint16_t *protseq, uint64_t *pOxid, struct DUALSTRINGARRAY **pdsaOxidBindings, struct GUID *ipidRemUnknown, uint32_t *AuthnHint, struct COMVERSION *ServerVersion, WERROR *hr, struct MInterfacePointer **ifaces, WERROR *results, TALLOC_CTX *mem_ctx = NULL)
	{
		struct RemoteActivation r;
		NTSTATUS status;
		
		/* Fill r structure */
		r.in.this = this;
		r.in.Clsid = Clsid;
		r.in.pwszObjectName = pwszObjectName;
		r.in.pObjectStorage = pObjectStorage;
		r.in.ClientImpLevel = ClientImpLevel;
		r.in.Mode = Mode;
		r.in.Interfaces = Interfaces;
		r.in.pIIDs = pIIDs;
		r.in.num_protseqs = num_protseqs;
		r.in.protseq = protseq;
		
		status = dcerpc_RemoteActivation(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		*that = *r.out.that;
		*pOxid = *r.out.pOxid;
		*pdsaOxidBindings = *r.out.pdsaOxidBindings;
		*ipidRemUnknown = *r.out.ipidRemUnknown;
		*AuthnHint = *r.out.AuthnHint;
		*ServerVersion = *r.out.ServerVersion;
		*hr = *r.out.hr;
		*ifaces = *r.out.ifaces;
		*results = *r.out.results;
		return r.out.result;
	}
	
};

/* imp_levels */

