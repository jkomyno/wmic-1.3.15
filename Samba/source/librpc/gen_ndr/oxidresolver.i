/* This file is autogenerated by pidl. DO NOT EDIT */
%module oxidresolver

%{
#include "includes.h"
#include "auth/credentials/credentials.h"
#include "librpc/gen_ndr/ndr_oxidresolver_c.h"
#include "librpc/gen_ndr/oxidresolver.h"
%}
%import "samba.i"

%inline {
void ntstatus_exception(NTSTATUS status)
{
	/* FIXME */
}
}



%inline {
struct IOXIDResolver { struct dcerpc_pipe *pipe; };
}

%extend IOXIDResolver {
	IOXIDResolver (const char *binding, struct cli_credentials *cred = NULL, TALLOC_CTX *mem_ctx = NULL, struct event_context *event = NULL)
	{
		struct IOXIDResolver *ret = talloc(mem_ctx, struct IOXIDResolver);
		NTSTATUS status;
		
		status = dcerpc_pipe_connect(mem_ctx, &ret->pipe, binding, &dcerpc_table_IOXIDResolver, cred, event);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return NULL;
		}
		
		return ret;
	}
	
	~IOXIDResolver() {
		talloc_free(self);
	}
	
	/* ResolveOxid */
	WERROR ResolveOxid(uint64_t pOxid, uint16_t cRequestedProtseqs, uint16_t *arRequestedProtseqs, struct DUALSTRINGARRAY **ppdsaOxidBindings, struct GUID *pipidRemUnknown, uint32_t *pAuthnHint, TALLOC_CTX *mem_ctx = NULL)
	{
		struct ResolveOxid r;
		NTSTATUS status;
		
		/* Fill r structure */
		r.in.pOxid = pOxid;
		r.in.cRequestedProtseqs = cRequestedProtseqs;
		r.in.arRequestedProtseqs = arRequestedProtseqs;
		
		status = dcerpc_ResolveOxid(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		*ppdsaOxidBindings = *r.out.ppdsaOxidBindings;
		*pipidRemUnknown = *r.out.pipidRemUnknown;
		*pAuthnHint = *r.out.pAuthnHint;
		return r.out.result;
	}
	
	/* SimplePing */
	WERROR SimplePing(uint64_t *SetId, TALLOC_CTX *mem_ctx = NULL)
	{
		struct SimplePing r;
		NTSTATUS status;
		
		/* Fill r structure */
		r.in.SetId = SetId;
		
		status = dcerpc_SimplePing(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
	/* ComplexPing */
	WERROR ComplexPing(uint64_t *SetId, uint16_t SequenceNum, uint16_t cAddToSet, uint16_t cDelFromSet, struct GUID *AddToSet, struct GUID *DelFromSet, uint16_t *PingBackoffFactor, TALLOC_CTX *mem_ctx = NULL)
	{
		struct ComplexPing r;
		NTSTATUS status;
		
		/* Fill r structure */
		r.in.SetId = SetId;
		r.in.SequenceNum = SequenceNum;
		r.in.cAddToSet = cAddToSet;
		r.in.cDelFromSet = cDelFromSet;
		r.in.AddToSet = AddToSet;
		r.in.DelFromSet = DelFromSet;
		
		status = dcerpc_ComplexPing(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		*SetId = *r.out.SetId;
		*PingBackoffFactor = *r.out.PingBackoffFactor;
		return r.out.result;
	}
	
	/* ServerAlive */
	WERROR ServerAlive(TALLOC_CTX *mem_ctx = NULL)
	{
		struct ServerAlive r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_ServerAlive(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
	/* ResolveOxid2 */
	WERROR ResolveOxid2(uint64_t pOxid, uint16_t cRequestedProtseqs, uint16_t *arRequestedProtseqs, struct DUALSTRINGARRAY **pdsaOxidBindings, struct GUID *ipidRemUnknown, uint32_t *AuthnHint, struct COMVERSION *ComVersion, TALLOC_CTX *mem_ctx = NULL)
	{
		struct ResolveOxid2 r;
		NTSTATUS status;
		
		/* Fill r structure */
		r.in.pOxid = pOxid;
		r.in.cRequestedProtseqs = cRequestedProtseqs;
		r.in.arRequestedProtseqs = arRequestedProtseqs;
		
		status = dcerpc_ResolveOxid2(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		*pdsaOxidBindings = *r.out.pdsaOxidBindings;
		*ipidRemUnknown = *r.out.ipidRemUnknown;
		*AuthnHint = *r.out.AuthnHint;
		*ComVersion = *r.out.ComVersion;
		return r.out.result;
	}
	
	/* ServerAlive2 */
	WERROR ServerAlive2(struct COMINFO *info, struct DUALSTRINGARRAY *dualstring, uint8_t unknown2, TALLOC_CTX *mem_ctx = NULL)
	{
		struct ServerAlive2 r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_ServerAlive2(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		*info = *r.out.info;
		*dualstring = *r.out.dualstring;
		/* FIXME: unknown2 [out] argument is not a pointer */
		*unknown2 = *r.out.unknown2;
		return r.out.result;
	}
	
};

/* COMINFO */

