/* This file is autogenerated by pidl. DO NOT EDIT */
%module browser

%{
#include "includes.h"
#include "auth/credentials/credentials.h"
#include "librpc/gen_ndr/ndr_browser_c.h"
#include "librpc/gen_ndr/browser.h"
%}
%import "samba.i"

%inline {
void ntstatus_exception(NTSTATUS status)
{
	/* FIXME */
}
}



%inline {
struct browser { struct dcerpc_pipe *pipe; };
}

%extend browser {
	browser (const char *binding, struct cli_credentials *cred = NULL, TALLOC_CTX *mem_ctx = NULL, struct event_context *event = NULL)
	{
		struct browser *ret = talloc(mem_ctx, struct browser);
		NTSTATUS status;
		
		status = dcerpc_pipe_connect(mem_ctx, &ret->pipe, binding, &dcerpc_table_browser, cred, event);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return NULL;
		}
		
		return ret;
	}
	
	~browser() {
		talloc_free(self);
	}
	
	/* BrowserrServerEnum */
	NTSTATUS BrowserrServerEnum(TALLOC_CTX *mem_ctx = NULL)
	{
		struct BrowserrServerEnum r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_BrowserrServerEnum(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
	/* BrowserrDebugCall */
	NTSTATUS BrowserrDebugCall(TALLOC_CTX *mem_ctx = NULL)
	{
		struct BrowserrDebugCall r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_BrowserrDebugCall(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
	/* BrowserrQueryOtherDomains */
	NTSTATUS BrowserrQueryOtherDomains(TALLOC_CTX *mem_ctx = NULL)
	{
		struct BrowserrQueryOtherDomains r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_BrowserrQueryOtherDomains(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
	/* BrowserrResetNetlogonState */
	NTSTATUS BrowserrResetNetlogonState(TALLOC_CTX *mem_ctx = NULL)
	{
		struct BrowserrResetNetlogonState r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_BrowserrResetNetlogonState(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
	/* BrowserrDebugTrace */
	NTSTATUS BrowserrDebugTrace(TALLOC_CTX *mem_ctx = NULL)
	{
		struct BrowserrDebugTrace r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_BrowserrDebugTrace(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
	/* BrowserrQueryStatistics */
	NTSTATUS BrowserrQueryStatistics(TALLOC_CTX *mem_ctx = NULL)
	{
		struct BrowserrQueryStatistics r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_BrowserrQueryStatistics(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
	/* BrowserResetStatistics */
	NTSTATUS BrowserResetStatistics(TALLOC_CTX *mem_ctx = NULL)
	{
		struct BrowserResetStatistics r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_BrowserResetStatistics(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
	/* NetrBrowserStatisticsClear */
	NTSTATUS NetrBrowserStatisticsClear(TALLOC_CTX *mem_ctx = NULL)
	{
		struct NetrBrowserStatisticsClear r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_NetrBrowserStatisticsClear(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
	/* NetrBrowserStatisticsGet */
	NTSTATUS NetrBrowserStatisticsGet(TALLOC_CTX *mem_ctx = NULL)
	{
		struct NetrBrowserStatisticsGet r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_NetrBrowserStatisticsGet(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
	/* BrowserrSetNetlogonState */
	NTSTATUS BrowserrSetNetlogonState(TALLOC_CTX *mem_ctx = NULL)
	{
		struct BrowserrSetNetlogonState r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_BrowserrSetNetlogonState(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
	/* BrowserrQueryEmulatedDomains */
	NTSTATUS BrowserrQueryEmulatedDomains(TALLOC_CTX *mem_ctx = NULL)
	{
		struct BrowserrQueryEmulatedDomains r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_BrowserrQueryEmulatedDomains(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
	/* BrowserrServerEnumEx */
	NTSTATUS BrowserrServerEnumEx(TALLOC_CTX *mem_ctx = NULL)
	{
		struct BrowserrServerEnumEx r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_BrowserrServerEnumEx(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return r.out.result;
		}
		
		/* Set out arguments */
		return r.out.result;
	}
	
};


