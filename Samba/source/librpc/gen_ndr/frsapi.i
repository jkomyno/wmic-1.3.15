/* This file is autogenerated by pidl. DO NOT EDIT */
%module frsapi

%{
#include "includes.h"
#include "auth/credentials/credentials.h"
#include "librpc/gen_ndr/ndr_frsapi_c.h"
#include "librpc/gen_ndr/frsapi.h"
%}
%import "samba.i"

%inline {
void ntstatus_exception(NTSTATUS status)
{
	/* FIXME */
}
}



%inline {
struct frsapi { struct dcerpc_pipe *pipe; };
}

%extend frsapi {
	frsapi (const char *binding, struct cli_credentials *cred = NULL, TALLOC_CTX *mem_ctx = NULL, struct event_context *event = NULL)
	{
		struct frsapi *ret = talloc(mem_ctx, struct frsapi);
		NTSTATUS status;
		
		status = dcerpc_pipe_connect(mem_ctx, &ret->pipe, binding, &dcerpc_table_frsapi, cred, event);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return NULL;
		}
		
		return ret;
	}
	
	~frsapi() {
		talloc_free(self);
	}
	
	/* FRSAPI_VERIFY_PROMOTION */
	void FRSAPI_VERIFY_PROMOTION(TALLOC_CTX *mem_ctx = NULL)
	{
		struct FRSAPI_VERIFY_PROMOTION r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_FRSAPI_VERIFY_PROMOTION(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* FRSAPI_PROMOTION_STATUS */
	void FRSAPI_PROMOTION_STATUS(TALLOC_CTX *mem_ctx = NULL)
	{
		struct FRSAPI_PROMOTION_STATUS r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_FRSAPI_PROMOTION_STATUS(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* FRSAPI_START_DEMOTION */
	void FRSAPI_START_DEMOTION(TALLOC_CTX *mem_ctx = NULL)
	{
		struct FRSAPI_START_DEMOTION r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_FRSAPI_START_DEMOTION(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* FRSAPI_COMMIT_DEMOTION */
	void FRSAPI_COMMIT_DEMOTION(TALLOC_CTX *mem_ctx = NULL)
	{
		struct FRSAPI_COMMIT_DEMOTION r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_FRSAPI_COMMIT_DEMOTION(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* FRSAPI_SET_DS_POLLING_INTERVAL_W */
	void FRSAPI_SET_DS_POLLING_INTERVAL_W(TALLOC_CTX *mem_ctx = NULL)
	{
		struct FRSAPI_SET_DS_POLLING_INTERVAL_W r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_FRSAPI_SET_DS_POLLING_INTERVAL_W(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* FRSAPI_GET_DS_POLLING_INTERVAL_W */
	void FRSAPI_GET_DS_POLLING_INTERVAL_W(TALLOC_CTX *mem_ctx = NULL)
	{
		struct FRSAPI_GET_DS_POLLING_INTERVAL_W r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_FRSAPI_GET_DS_POLLING_INTERVAL_W(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* FRSAPI_VERIFY_PROMOTION_W */
	void FRSAPI_VERIFY_PROMOTION_W(TALLOC_CTX *mem_ctx = NULL)
	{
		struct FRSAPI_VERIFY_PROMOTION_W r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_FRSAPI_VERIFY_PROMOTION_W(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* FRSAPI_INFO_W */
	void FRSAPI_INFO_W(TALLOC_CTX *mem_ctx = NULL)
	{
		struct FRSAPI_INFO_W r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_FRSAPI_INFO_W(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* FRSAPI_IS_PATH_REPLICATED */
	void FRSAPI_IS_PATH_REPLICATED(TALLOC_CTX *mem_ctx = NULL)
	{
		struct FRSAPI_IS_PATH_REPLICATED r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_FRSAPI_IS_PATH_REPLICATED(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* FRSAPI_WRITER_COMMAND */
	void FRSAPI_WRITER_COMMAND(TALLOC_CTX *mem_ctx = NULL)
	{
		struct FRSAPI_WRITER_COMMAND r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_FRSAPI_WRITER_COMMAND(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
};


