/* This file is autogenerated by pidl. DO NOT EDIT */
%module dsbackup

%{
#include "includes.h"
#include "auth/credentials/credentials.h"
#include "librpc/gen_ndr/ndr_dsbackup_c.h"
#include "librpc/gen_ndr/dsbackup.h"
%}
%import "samba.i"

%inline {
void ntstatus_exception(NTSTATUS status)
{
	/* FIXME */
}
}



%inline {
struct ad_backup { struct dcerpc_pipe *pipe; };
}

%extend ad_backup {
	ad_backup (const char *binding, struct cli_credentials *cred = NULL, TALLOC_CTX *mem_ctx = NULL, struct event_context *event = NULL)
	{
		struct ad_backup *ret = talloc(mem_ctx, struct ad_backup);
		NTSTATUS status;
		
		status = dcerpc_pipe_connect(mem_ctx, &ret->pipe, binding, &dcerpc_table_ad_backup, cred, event);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return NULL;
		}
		
		return ret;
	}
	
	~ad_backup() {
		talloc_free(self);
	}
	
	/* HrRBackupPrepare */
	void HrRBackupPrepare(TALLOC_CTX *mem_ctx = NULL)
	{
		struct HrRBackupPrepare r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_HrRBackupPrepare(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* HrRBackupEnd */
	void HrRBackupEnd(TALLOC_CTX *mem_ctx = NULL)
	{
		struct HrRBackupEnd r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_HrRBackupEnd(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* HrRBackupGetAttachmentInformation */
	void HrRBackupGetAttachmentInformation(TALLOC_CTX *mem_ctx = NULL)
	{
		struct HrRBackupGetAttachmentInformation r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_HrRBackupGetAttachmentInformation(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* HrRBackupOpenFile */
	void HrRBackupOpenFile(TALLOC_CTX *mem_ctx = NULL)
	{
		struct HrRBackupOpenFile r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_HrRBackupOpenFile(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* HrRBackupRead */
	void HrRBackupRead(TALLOC_CTX *mem_ctx = NULL)
	{
		struct HrRBackupRead r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_HrRBackupRead(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* HrRBackupClose */
	void HrRBackupClose(TALLOC_CTX *mem_ctx = NULL)
	{
		struct HrRBackupClose r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_HrRBackupClose(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* HrRBackupGetBackupLogs */
	void HrRBackupGetBackupLogs(TALLOC_CTX *mem_ctx = NULL)
	{
		struct HrRBackupGetBackupLogs r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_HrRBackupGetBackupLogs(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* HrRBackupTruncateLogs */
	void HrRBackupTruncateLogs(TALLOC_CTX *mem_ctx = NULL)
	{
		struct HrRBackupTruncateLogs r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_HrRBackupTruncateLogs(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* HrRBackupPing */
	void HrRBackupPing(TALLOC_CTX *mem_ctx = NULL)
	{
		struct HrRBackupPing r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_HrRBackupPing(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
};


%inline {
struct ad_restore { struct dcerpc_pipe *pipe; };
}

%extend ad_restore {
	ad_restore (const char *binding, struct cli_credentials *cred = NULL, TALLOC_CTX *mem_ctx = NULL, struct event_context *event = NULL)
	{
		struct ad_restore *ret = talloc(mem_ctx, struct ad_restore);
		NTSTATUS status;
		
		status = dcerpc_pipe_connect(mem_ctx, &ret->pipe, binding, &dcerpc_table_ad_restore, cred, event);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return NULL;
		}
		
		return ret;
	}
	
	~ad_restore() {
		talloc_free(self);
	}
	
	/* HrRIsNTDSOnline */
	void HrRIsNTDSOnline(TALLOC_CTX *mem_ctx = NULL)
	{
		struct HrRIsNTDSOnline r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_HrRIsNTDSOnline(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* HrRRestorePrepare */
	void HrRRestorePrepare(TALLOC_CTX *mem_ctx = NULL)
	{
		struct HrRRestorePrepare r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_HrRRestorePrepare(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* HrRRestoreRegister */
	void HrRRestoreRegister(TALLOC_CTX *mem_ctx = NULL)
	{
		struct HrRRestoreRegister r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_HrRRestoreRegister(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* HrRRestoreRegisterComplete */
	void HrRRestoreRegisterComplete(TALLOC_CTX *mem_ctx = NULL)
	{
		struct HrRRestoreRegisterComplete r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_HrRRestoreRegisterComplete(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* HrRRestoreGetDatabaseLocations */
	void HrRRestoreGetDatabaseLocations(TALLOC_CTX *mem_ctx = NULL)
	{
		struct HrRRestoreGetDatabaseLocations r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_HrRRestoreGetDatabaseLocations(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* HrRRestoreEnd */
	void HrRRestoreEnd(TALLOC_CTX *mem_ctx = NULL)
	{
		struct HrRRestoreEnd r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_HrRRestoreEnd(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* HrRRestoreSetCurrentLogNumber */
	void HrRRestoreSetCurrentLogNumber(TALLOC_CTX *mem_ctx = NULL)
	{
		struct HrRRestoreSetCurrentLogNumber r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_HrRRestoreSetCurrentLogNumber(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* HrRRestoreCheckLogsForBackup */
	void HrRRestoreCheckLogsForBackup(TALLOC_CTX *mem_ctx = NULL)
	{
		struct HrRRestoreCheckLogsForBackup r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_HrRRestoreCheckLogsForBackup(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
};


