/* This file is autogenerated by pidl. DO NOT EDIT */
%module msgsvc

%{
#include "includes.h"
#include "auth/credentials/credentials.h"
#include "librpc/gen_ndr/ndr_msgsvc_c.h"
#include "librpc/gen_ndr/msgsvc.h"
%}
%import "samba.i"

%inline {
void ntstatus_exception(NTSTATUS status)
{
	/* FIXME */
}
}



%inline {
struct msgsvc { struct dcerpc_pipe *pipe; };
}

%extend msgsvc {
	msgsvc (const char *binding, struct cli_credentials *cred = NULL, TALLOC_CTX *mem_ctx = NULL, struct event_context *event = NULL)
	{
		struct msgsvc *ret = talloc(mem_ctx, struct msgsvc);
		NTSTATUS status;
		
		status = dcerpc_pipe_connect(mem_ctx, &ret->pipe, binding, &dcerpc_table_msgsvc, cred, event);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return NULL;
		}
		
		return ret;
	}
	
	~msgsvc() {
		talloc_free(self);
	}
	
	/* NetrMessageNameAdd */
	void NetrMessageNameAdd(TALLOC_CTX *mem_ctx = NULL)
	{
		struct NetrMessageNameAdd r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_NetrMessageNameAdd(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* NetrMessageNameEnum */
	void NetrMessageNameEnum(TALLOC_CTX *mem_ctx = NULL)
	{
		struct NetrMessageNameEnum r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_NetrMessageNameEnum(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* NetrMessageNameGetInfo */
	void NetrMessageNameGetInfo(TALLOC_CTX *mem_ctx = NULL)
	{
		struct NetrMessageNameGetInfo r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_NetrMessageNameGetInfo(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
	/* NetrMessageNameDel */
	void NetrMessageNameDel(TALLOC_CTX *mem_ctx = NULL)
	{
		struct NetrMessageNameDel r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_NetrMessageNameDel(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
};


%inline {
struct msgsvcsend { struct dcerpc_pipe *pipe; };
}

%extend msgsvcsend {
	msgsvcsend (const char *binding, struct cli_credentials *cred = NULL, TALLOC_CTX *mem_ctx = NULL, struct event_context *event = NULL)
	{
		struct msgsvcsend *ret = talloc(mem_ctx, struct msgsvcsend);
		NTSTATUS status;
		
		status = dcerpc_pipe_connect(mem_ctx, &ret->pipe, binding, &dcerpc_table_msgsvcsend, cred, event);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return NULL;
		}
		
		return ret;
	}
	
	~msgsvcsend() {
		talloc_free(self);
	}
	
	/* NetrSendMessage */
	void NetrSendMessage(TALLOC_CTX *mem_ctx = NULL)
	{
		struct NetrSendMessage r;
		NTSTATUS status;
		
		/* Fill r structure */
		
		status = dcerpc_NetrSendMessage(self->pipe, mem_ctx, &r);
		if (NT_STATUS_IS_ERR(status)) {
			ntstatus_exception(status);
			return;
		}
		
		/* Set out arguments */
	}
	
};


