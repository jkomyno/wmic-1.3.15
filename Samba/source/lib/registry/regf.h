/* header auto-generated by pidl */

#ifndef _HEADER_regf
#define _HEADER_regf

#define REGF_OFFSET_NONE	( 0xffffffff )
struct regf_version {
	uint32_t major;/* [value] */
	uint32_t minor;/* [value(3)] */
	uint32_t release;/* [value(0)] */
	uint32_t build;/* [value] */
};

struct regf_hdr {
	const char *REGF_ID;/* [charset(DOS)] */
	uint32_t update_counter1;
	uint32_t update_counter2;
	NTTIME modtime;
	struct regf_version version;
	uint32_t data_offset;
	uint32_t last_block;
	uint32_t uk7;/* [value] */
	const char *description;/* [charset(UTF16)] */
	uint32_t padding[83];
	uint32_t chksum;
};

struct hbin_block {
	const char *HBIN_ID;/* [charset(DOS)] */
	uint32_t offset_from_first;
	uint32_t offset_to_next;
	uint32_t unknown[2];
	NTTIME last_change;
	uint32_t block_size;
	uint8_t *data;
};

enum reg_key_type {
	REG_ROOT_KEY=0x20,
	REG_SUB_KEY=0x2C,
	REG_SYM_LINK=0x10
};

struct nk_block {
	const char *header;/* [charset(DOS)] */
	enum reg_key_type type;
	NTTIME last_change;
	uint32_t uk1;
	uint32_t parent_offset;
	uint32_t num_subkeys;
	uint32_t uk2;
	uint32_t subkeys_offset;
	uint32_t unknown_offset;
	uint32_t num_values;
	uint32_t values_offset;
	uint32_t sk_offset;
	uint32_t clsname_offset;
	uint32_t unk3[5];
	uint16_t name_length;/* [value(strlen(key_name))] */
	uint16_t clsname_length;
	const char *key_name;/* [charset(DOS)] */
};

struct sk_block {
	const char *header;/* [charset(DOS)] */
	uint16_t tag;
	uint32_t prev_offset;
	uint32_t next_offset;
	uint32_t ref_cnt;
	uint32_t rec_size;
	uint8_t *sec_desc;
};

struct lh_hash {
	uint32_t nk_offset;
	uint32_t base37;
};

struct lh_block {
	const char *header;/* [charset(DOS)] */
	uint16_t key_count;
	struct lh_hash *hr;
};

struct li_block {
	const char *header;/* [charset(DOS)] */
	uint16_t key_count;
	uint32_t *nk_offset;
};

struct ri_block {
	const char *header;/* [charset(DOS)] */
	uint16_t key_count;
	uint32_t *offset;
};

struct vk_block {
	const char *header;/* [charset(DOS)] */
	uint16_t name_length;/* [value(strlen(data_name))] */
	uint32_t data_length;
	uint32_t data_offset;
	uint32_t data_type;
	uint16_t flag;
	uint16_t unk1;
	const char *data_name;/* [charset(DOS)] */
};

struct hash_record {
	uint32_t nk_offset;
	const char *hash;/* [charset(DOS)] */
};

struct lf_block {
	const char *header;/* [charset(DOS)] */
	uint16_t key_count;
	struct hash_record *hr;
};

#endif /* _HEADER_regf */
